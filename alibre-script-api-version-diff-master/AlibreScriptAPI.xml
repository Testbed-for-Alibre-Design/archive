<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>AlibreScriptAPI</name>
  </assembly>
  <members>
    <member name="M:AlibreScript.API.AssembledPart.GetAssemblyVertices">
            <summary>
            Gets a python list of the current vertices in the part in the assembly coordinate system
            </summary>
            <returns>Python list of vertices in assembly coordinates [ [X1, Y1, Z1], ... [Xn, Yn, Zn] ]</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.GetMappedOccurrence(AlibreX.IADAssemblySession)">
            <summary>
            Gets the occurrence of the part mapped into the 
            occurrence structure of a specific assembly
            This occurrence can be used to create constraints in the specific
            assembly using the part
            </summary>
            <param name="Assembly">Assembly for occurrence structure</param>
            <returns>Mapped occurrence or null if not found</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.GetAssembly">
            <summary>
            Gets the assembly for the part
            </summary>
            <returns>Assembly or None if no assembly</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.GetConfiguration(System.String)">
            <summary>
            Gets a configuration with a specific name
            </summary>
            <param name="Name">Name of confguration</param>
            <returns>Configuration object</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.GetAssemblyBoundingBox">
            <summary>
            Gets the bounding box for the part as eight points in the assembly coordinate system
            </summary>
            <returns>Python list of eight points as [P1, P2, ... P8]. Each point is [X, Y, Z]</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.PartPointtoAssemblyPoint(IronPython.Runtime.List)">
            <summary>
            Converts a point in the part coordinate system into a point in the assembly
            coordinate system
            </summary>
            <param name="PartPoint">Point [X, Y, Z] in the part coordinate system</param>
            <returns>Point [X, Y, Z] in the assembly coordinate system</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.AssemblyPointtoPartPoint(IronPython.Runtime.List)">
            <summary>
            Converts a point in the assembly coordinate system into a point in the part
            coordinate system
            </summary>
            <param name="AssemblyPoint">Point [X, Y, Z] in the assembly coordinate system</param>
            <returns>Point [X, Y, Z] in the part coordinate system</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.GetFace(System.String)">
            <summary>
            Gets a face using it's name "Face&lt;n&gt;"
            </summary>
            <param name="Name">Name of face</param>
            <returns>Face if found</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.GetEdge(System.String)">
            <summary>
            Gets an edge using it's name "Edge&lt;n&gt;"
            </summary>
            <param name="Name">Name of edge</param>
            <returns>Edge if found</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.GetEdges">
            <summary>
            Gets a python list of the current edges in the part
            </summary>
            <returns>Python list of edges</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.GetFaces">
            <summary>
            Gets a python list of the current faces in the part
            </summary>
            <returns>Python list of faces</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.AddPoint(System.String,AlibreScript.API.IPoint,System.Double,System.Double,System.Double)">
            <summary>
            Adds a point at an offset to a point or a vertex
            </summary>
            <param name="Name">Name of point</param>
            <param name="PointOrVertex">Point or vertex</param>
            <param name="XOffset">X offse</param>
            <param name="YOffset">Y offset</param>
            <param name="ZOffset">Z offset</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.AddPoint(System.String,AlibreScript.API.IPoint,AlibreScript.API.IPoint,System.Double)">
            <summary>
            Adds a point between two points/vertices
            </summary>
            <param name="Name">Name of point</param>
            <param name="PointOrVertex1">First point or vertex</param>
            <param name="PointOrVertex2">Second point or vertex</param>
            <param name="Ratio">Ratio of distance between points/vertices</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.AddPoint(System.String,AlibreScript.API.IAxis,AlibreScript.API.IAxis)">
            <summary>
            Adds a point at the intersection or two axes or edges
            </summary>
            <param name="Name">Name of point</param>
            <param name="AxisOrEdge1">First axis or edge</param>
            <param name="AxisOrEdge2">Second axis or edge</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.AddPoint(System.String,AlibreScript.API.IPlane,AlibreScript.API.IPlane,AlibreScript.API.IPlane)">
            <summary>
            Adds a point at the intersection of three planes or faces
            </summary>
            <param name="Name">Name of point</param>
            <param name="PlaneOrFace1">First plane or face</param>
            <param name="PlaneOrFace2">Second plane or face</param>
            <param name="PlaneOrFace3">Third plane or face</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.AddPoint(System.String,AlibreScript.API.IAxis,AlibreScript.API.IPlane)">
            <summary>
            Adds a point at the the intersection of a axis or edge and a plane or face
            </summary>
            <param name="Name">Name of point</param>
            <param name="AxisOrEdge">Axis or edge</param>
            <param name="PlaneOrFace">Plane or face</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.AddPoint(System.String,AlibreScript.API.IPoint,AlibreScript.API.IPlane,System.Double,System.Double)">
            <summary>
            Adds a point by projecting a point or vertex onto a plane or face
            </summary>
            <param name="Name">Name of point</param>
            <param name="SourcePointOrVertex">Point or vertex to project</param>
            <param name="TargetPlaneOrFace">Plane or face to project onto</param>
            <param name="XOffset">X offset to apply to point once projected</param>
            <param name="YOffset">Y offset to apply to point once projected</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.AddPoint(System.String,AlibreScript.API.Edge,System.Double)">
            <summary>
            Adds a point on an edge
            </summary>
            <param name="Name">Name of point</param>
            <param name="TargetEdge">The edge to create the point on</param>
            <param name="Ratio">Ratio along the edge from 0.0 -&gt; 1.0</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.AddPointFromCircularEdge(System.String,AlibreScript.API.Edge)">
            <summary>
            Adds a point at the center of a circular edge
            </summary>
            <param name="Name">Name of point</param>
            <param name="TargetEdge">The edge to use for creating the point</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledPart.AddPointFromToroidalFace(System.String,AlibreScript.API.Face)">
            <summary>
            Adds a point at the center of a toroidal face
            </summary>
            <param name="Name">Name of point</param>
            <param name="TargetFace">Toroidal face to use in creating the point</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Part.RemovePoint(AlibreScript.API.Point)">
            <summary>
            Removes a point from the part
            </summary>
            <param name="Point">Point to remove</param>
        </member>
    <member name="M:AlibreScript.API.Part.RemovePlane(AlibreScript.API.Plane)">
            <summary>
            Removes a plane from the part
            </summary>
            <param name="Plane">Plane to remove</param>
        </member>
    <member name="M:AlibreScript.API.Part.RemoveSketch(System.String)">
            <summary>
            Removes a sketch from the part
            </summary>
            <param name="Name">Name of sketch to remove</param>
        </member>
    <member name="M:AlibreScript.API.Part.RemoveSketch(AlibreScript.API.Sketch)">
            <summary>
            Removes a sketch from the part
            </summary>
            <param name="Sketch">Sketch to remove</param>
        </member>
    <member name="M:AlibreScript.API.Part.Add3DSketch(System.String)">
            <summary>
            Creates a new 3D sketch
            </summary>
            <param name="Name">Name of sketch</param>
            <returns>Created sketch</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddGear(System.String,System.Double,System.Int32,System.Double,System.Double,System.Boolean,System.Double,System.Double,System.Int32,AlibreScript.API.ISketchSurface)">
            <summary>
            Adds a gear sketch to the part
            </summary>
            <param name="Name">Name of gear sketch</param>
            <param name="NumberofTeeth">Number of teeth</param>
            <param name="PitchDiameter">Diameter of pitch circle in current units</param>
            <param name="PressureAngle">Pressure angle (14.5 is typical)</param>
            <param name="DiametralPitch">Diametral angle (tooth size) (25.4/module) in teeth per inch</param>
            <param name="SingleTooth">true to create only a single tooth profile</param>
            <param name="CenterX">X-coordinate of gear center</param>
            <param name="CenterY">Y-coordinate of gear center</param>
            <param name="InvolutePoints">Number of points for involute curve. Decreasing this makes Cubify/Geomagic faster. Increasing makes tooth profiles more accurate and allows gears with more teeth to be generated.</param>
            <param name="Plane">Plane or face to create gear sketch on</param>
            <returns>Gear sketch</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddGearNP(System.String,System.Int32,System.Double,System.Double,System.Double,System.Double,AlibreScript.API.ISketchSurface)">
            <summary>
            Adds a gear sketch to the part using number of teeth and pitch diameter
            </summary>
            <param name="Name">Name of gear sketch</param>
            <param name="NumberofTeeth">Number of teeth</param>
            <param name="PitchDiameter">Diameter of pitch circle</param>
            <param name="PressureAngle">Pressure angle (14.5 is typical)</param>
            <param name="CenterX">X-coordinate of center of gear</param>
            <param name="CenterY">Y-coordinate of center of gear</param>
            <param name="Plane">Plane or face to create gear sketch on</param>
            <returns>Gear sketch</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddGearNP(System.String,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Boolean,AlibreScript.API.ISketchSurface)">
            <summary>
            Adds a gear sketch to the part using number of teeth and pitch diameter
            </summary>
            <param name="Name">Name of gear sketch</param>
            <param name="NumberofTeeth">Number of teeth</param>
            <param name="PitchDiameter">Diameter of pitch circle</param>
            <param name="PressureAngle">Pressure angle (14.5 is typical)</param>
            <param name="CenterX">X-coordinate of center of gear</param>
            <param name="CenterY">Y-coordinate of center of gear</param>
            <param name="SingleTooth">True to generate a single tooth</param>
            <param name="Plane">Plane or face to create gear sketch on</param>
            <returns>Gear sketch</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddGearDP(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,AlibreScript.API.ISketchSurface)">
            <summary>
            Adds a gear sketch to the part using diametral pitch and pitch diameter
            </summary>
            <param name="Name">Name of gear sketch</param>
            <param name="PitchDiameter">Diameter of pitch circle</param>
            <param name="PressureAngle">Pressure angle (14.5 is typical)</param>
            <param name="DiametralPitch">Diametral angle (tooth size) (1/module)</param>
            <param name="CenterX">X-coordinate of center of gear</param>
            <param name="CenterY">Y-coordinate of center of gear</param>
            <param name="Plane">Plane or face to create gear sketch on</param>
            <returns>Gear sketch</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddGearDP(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,AlibreScript.API.ISketchSurface)">
            <summary>
            Adds a gear sketch to the part using diametral pitch and pitch diameter
            </summary>
            <param name="Name">Name of gear sketch</param>
            <param name="PitchDiameter">Diameter of pitch circle</param>
            <param name="PressureAngle">Pressure angle (14.5 is typical)</param>
            <param name="DiametralPitch">Diametral angle (tooth size) (1/module)</param>
            <param name="CenterX">X-coordinate of center of gear</param>
            <param name="CenterY">Y-coordinate of center of gear</param>
            <param name="SingleTooth">True to generate a single tooth</param>
            <param name="Plane">Plane or face to create gear sketch on</param>
            <returns>Gear sketch</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddGearDN(System.String,System.Double,System.Int32,System.Double,System.Double,System.Double,AlibreScript.API.ISketchSurface)">
            <summary>
            Adds a gear sketch to the part using diametral pitch and number of teeth
            </summary>
            <param name="Name">Name of gear sketch</param>
            <param name="NumberofTeeth">Number of teeth</param>
            <param name="PressureAngle">Pressure angle (14.5 is typical)</param>
            <param name="DiametralPitch">Diametral angle (tooth size) (1/module)</param>
            <param name="CenterX">X-coordinate of center of gear</param>
            <param name="CenterY">Y-coordinate of center of gear</param>
            <param name="Plane">Plane or face to create gear sketch on</param>
            <returns>Gear sketch</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddGearDN(System.String,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Boolean,AlibreScript.API.ISketchSurface)">
            <summary>
            Adds a gear sketch to the part using diametral pitch and number of teeth
            </summary>
            <param name="Name">Name of gear sketch</param>
            <param name="NumberofTeeth">Number of teeth</param>
            <param name="PressureAngle">Pressure angle (14.5 is typical)</param>
            <param name="DiametralPitch">Diametral angle (tooth size) (1/module)</param>
            <param name="CenterX">X-coordinate of center of gear</param>
            <param name="CenterY">Y-coordinate of center of gear</param>
            <param name="SingleTooth">True to generate a single tooth</param>
            <param name="Plane">Plane or face to create gear sketch on</param>
            <returns>Gear sketch</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddAxis(System.String,AlibreScript.API.ISketchSurface,AlibreScript.API.ISketchSurface)">
            <summary>
            Creates an axis based on the intersection of two planes/faces
            </summary>
            <param name="Name">Name of axis</param>
            <param name="Plane1">First plane/face</param>
            <param name="Plane2">Second plane/face</param>
            <returns>New Axis</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddAxis(System.String,AlibreScript.API.Point,AlibreScript.API.Point)">
            <summary>
            Creates an axis based on two points
            </summary>
            <param name="Name">Name of axis</param>
            <param name="PointA">First point object</param>
            <param name="PointB">Second point object</param>
            <returns>New axis</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddAxis(System.String,AlibreScript.API.Face)">
            <summary>
            Creates an axis for a cylindrical face
            </summary>
            <param name="Name">Name of axis</param>
            <param name="CylindricalFace">Cylindrical face</param>
            <returns>New axis</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddAxis(System.String,IronPython.Runtime.List,IronPython.Runtime.List)">
            <summary>
            Creates an axis based on two points
            </summary>
            <param name="Name">Name of axis</param>
            <param name="Point1">First point [X, Y, Z]</param>
            <param name="Point2">Second point [X, Y, Z]</param>
            <returns>New axis</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPoint(System.String,IronPython.Runtime.List)">
            <summary>
            Adds a point to the part
            </summary>
            <param name="Name">Name of the new point</param>
            <param name="Point">Point location [x, y, z]</param>
            <returns>The new point</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPoint(System.String,AlibreScript.API.Point)">
            <summary>
            Adds a point to the part
            </summary>
            <param name="Name">Name of the point</param>
            <param name="Point">Point to add</param>
        </member>
    <member name="M:AlibreScript.API.Part.AddPoint(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Adds a point to the part
            </summary>
            <param name="Name">Name of new point</param>
            <param name="X">X coordinate</param>
            <param name="Y">Y coordinate</param>
            <param name="Z">Z coordinate</param>
            <returns>The new point</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPoints(System.String,IronPython.Runtime.List)">
            <summary>
            Adds a set of points to the part
            </summary>
            <param name="Prefix">Prefix for the point names</param>
            <param name="Points">List of points [x1,y1,z1, ..., xn,yn,zn]</param>
        </member>
    <member name="M:AlibreScript.API.Part.Regenerate">
            <summary>
            Regenerates the part
            </summary>
        </member>
    <member name="M:AlibreScript.API.Part.AddExtrudeBoss(System.String,AlibreScript.API.Sketch,System.Double,System.Boolean)">
            <summary>
            Adds a simple extrude boss to a specific depth
            </summary>
            <param name="Name">Name of extrusion</param>
            <param name="Sketch">Sketch to extrude</param>
            <param name="Depth">Extrusion distance</param>
            <param name="IsReversed">True if extrusion direction is reversed</param>
            <returns>Extruded feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddExtrudeBoss(System.String,AlibreScript.API.Sketch,System.Double,System.Boolean,AlibreScript.API.Part.EndCondition,AlibreScript.API.ISketchSurface,System.Double,AlibreScript.API.Part.DirectionType,AlibreScript.API.ISweepPath,System.Double,System.Boolean)">
            <summary>
            Adds an extrude feature
            </summary>
            <param name="Name">Name of extrusion</param>
            <param name="Sketch">Sketch to extrude</param>
            <param name="Depth">Depth of extrusion</param>
            <param name="IsReversed">true if direction is reversed</param>
            <param name="EndCondition">End condition for extrusion</param>
            <param name="EndPlane">Face or plane to terminate extrusion</param>
            <param name="EndOffset">Offset from face or plane to terminate extrusion</param>
            <param name="Direction">Direction of extrusion</param>
            <param name="SweepPath">Sketch or edge to follow when extruding</param>
            <param name="DraftAngle">Angle of draft</param>
            <param name="OutwardDraft">true if outward draft</param>
            <returns>Extruded feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddExtrudeCut(System.String,AlibreScript.API.Sketch,System.Double,System.Boolean)">
            <summary>
            Adds a simple extrude cut to a specific depth
            </summary>
            <param name="Name">Name of extrusion</param>
            <param name="Sketch">Sketch to extrude</param>
            <param name="Depth">Extrusion distance</param>
            <param name="IsReversed">True if extrusion direction is reversed</param>
            <returns>Extruded feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddExtrudeCut(System.String,AlibreScript.API.Sketch,System.Double,System.Boolean,AlibreScript.API.Part.EndCondition,AlibreScript.API.ISketchSurface,System.Double,AlibreScript.API.Part.DirectionType,AlibreScript.API.ISweepPath,System.Double,System.Boolean)">
            <summary>
            Adds an extrude cut feature
            </summary>
            <param name="Name">Name of extrusion</param>
            <param name="Sketch">Sketch to extrude</param>
            <param name="Depth">Depth of extrusion</param>
            <param name="IsReversed">true if direction is reversed</param>
            <param name="EndCondition">End condition for extrusion</param>
            <param name="EndPlane">Face or plane to terminate extrusion</param>
            <param name="EndOffset">Offset from face or plane to terminate extrusion</param>
            <param name="Direction">Direction of extrusion</param>
            <param name="SweepPath">Sketch or edge to follow when extruding</param>
            <param name="DraftAngle">Angle of draft</param>
            <param name="OutwardDraft">true if outward draft</param>
            <returns>Extruded feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddRevolveBoss(System.String,AlibreScript.API.Sketch,AlibreScript.API.Axis,System.Double)">
            <summary>
            Creates a revolve boss feature
            </summary>
            <param name="Name">Name of feature</param>
            <param name="Sketch">Sketch to revolve</param>
            <param name="Axis">Axis to rotate around</param>
            <param name="Angle">Rotation angle in degrees</param>
            <returns>Created feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddRevolveCut(System.String,AlibreScript.API.Sketch,AlibreScript.API.Axis,System.Double)">
            <summary>
            Creates a revolve cut feature
            </summary>
            <param name="Name">Name of feature</param>
            <param name="Sketch">Sketch to revolve</param>
            <param name="Axis">Axis to rotate around</param>
            <param name="Angle">Rotation angle in degrees</param>
            <returns>Created feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddLoftBoss(System.String,IronPython.Runtime.List,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a loft extrusion
            </summary>
            <param name="Name">Name of loft</param>
            <param name="CrossSections">Python list of cross sections (faces, 2D sketches, design points)</param>
            <param name="MinimizeTwist">True to minimize twist</param>
            <param name="MinimizeCurvature">True to minimize curvature</param>
            <param name="SimplifySurface">True to simplify the loft surface</param>
            <param name="ConnectEnds">True to connect the start of the loft with the end</param>
            <returns>Extruded feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddLoftBoss(System.String,IronPython.Runtime.List,IronPython.Runtime.List,AlibreScript.API.GuideCurveTypes,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a loft extrusion using guide curves
            </summary>
            <param name="Name">Name of loft</param>
            <param name="CrossSections">Python list of cross sections (faces, 2D sketches, design points)</param>
            <param name="GuideCurves">Python list of guide curves (3D sketches)</param>
            <param name="GuideType">Type of guide curve</param>
            <param name="MinimizeTwist">True to minimize twist</param>
            <param name="MinimizeCurvature">True to minimize curvature</param>
            <param name="SimplifySurface">True to simplify the loft surface</param>
            <param name="ConnectEnds">True to connect the start of the loft with the end</param>
            <returns>Extruded feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddLoftCut(System.String,IronPython.Runtime.List,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a loft cut
            </summary>
            <param name="Name">Name of loft</param>
            <param name="CrossSections">Python list of cross sections (faces, 2D sketches, design points)</param>
            <param name="MinimizeTwist">True to minimize twist</param>
            <param name="MinimizeCurvature">True to minimize curvature</param>
            <param name="SimplifySurface">True to simplify the loft surface</param>
            <param name="ConnectEnds">True to connect the start of the loft with the end</param>
            <returns>Cut feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddLoftCut(System.String,IronPython.Runtime.List,IronPython.Runtime.List,AlibreScript.API.GuideCurveTypes,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a loft cut using guide curves
            </summary>
            <param name="Name">Name of loft</param>
            <param name="CrossSections">Python list of cross sections (faces, 2D sketches, design points)</param>
            <param name="GuideCurves">Python list of guide curves (3D sketches)</param>
            <param name="GuideType">Type of guide curve</param>
            <param name="MinimizeTwist">True to minimize twist</param>
            <param name="MinimizeCurvature">True to minimize curvature</param>
            <param name="SimplifySurface">True to simplify the loft surface</param>
            <param name="ConnectEnds">True to connect the start of the loft with the end</param>
            <returns>Extruded feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddSweepBoss(System.String,AlibreScript.API.Sketch,AlibreScript.API.ISweepPath,System.Boolean,AlibreScript.API.Part.EndCondition,AlibreScript.API.ISketchSurface,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a sweep extrude feature
            </summary>
            <param name="Name">Name of extrusion</param>
            <param name="ProfileSketch">Sketch to extrude</param>
            <param name="PathSketch">Sketch or edge to sweep along</param>
            <param name="IsRigid">true if path is parallel to profile</param>
            <param name="EndCondition">End condition for extrusion</param>
            <param name="EndPlane">Face or plane to terminate extrusion</param>
            <param name="EndOffset">Offset from face or plane to terminate extrusion</param>
            <param name="DraftAngle">Angle of draft</param>
            <param name="OutwardDraft">true if outward draft</param>
            <returns>Extruded feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddSweepCut(System.String,AlibreScript.API.Sketch,AlibreScript.API.ISweepPath,System.Boolean,AlibreScript.API.Part.EndCondition,AlibreScript.API.ISketchSurface,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a sweep extrude cut feature
            </summary>
            <param name="Name">Name of extrusion</param>
            <param name="ProfileSketch">Sketch to extrude</param>
            <param name="PathSketch">Sketch or edge to sweep along</param>
            <param name="IsRigid">true if path is parallel to profile</param>
            <param name="EndCondition">End condition for extrusion</param>
            <param name="EndPlane">Face or plane to terminate extrusion</param>
            <param name="EndOffset">Offset from face or plane to terminate extrusion</param>
            <param name="DraftAngle">Angle of draft</param>
            <param name="OutwardDraft">true if outward draft</param>
            <returns>Extruded feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddFillet(System.String,AlibreScript.API.IFilletable,System.Double,System.Boolean)">
            <summary>
            Adds a constant radius fillet to a face or edge
            </summary>
            <param name="Name">Name of fillet</param>
            <param name="Item">Face or edge to fillet</param>
            <param name="Radius">Radius of fillet</param>
            <param name="TangentPropagate">True to propagate the fillet along connected edges</param>
            <returns>Fillet feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddFillet(System.String,IronPython.Runtime.List,System.Double,System.Boolean)">
            <summary>
            Adds a constant radius fillet to a set of faces and edges
            </summary>
            <param name="Name">Name of fillet</param>
            <param name="Items">Faces and edges to fillet</param>
            <param name="Radius">Radius of fillet</param>
            <param name="TangentPropagate">True to propagate the fillet along connected edges</param>
            <returns>Fillet feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddFillet(System.String,IronPython.Runtime.List,IronPython.Runtime.List,IronPython.Runtime.List,System.Boolean)">
            <summary>
            Adds a variable radius fillet to a set of faces and edges
            </summary>
            <param name="Name">Name of fillet</param>
            <param name="Items">Faces and edges to fillet</param>
            <param name="StartRadii">Start radii of fillets</param>
            <param name="EndRadii">End radii of fillets</param>
            <param name="TangentPropagate">True to propagate the fillet along connected edges</param>
            <returns>Fillet feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.Scale(System.String,System.Boolean,System.Double)">
            <summary>
            Uniform scaling of the part
            </summary>
            <param name="Name">Name of the scaling</param>
            <param name="ScaleAboutCenter">true to scale around the center of the part</param>
            <param name="ScaleFactor">Scale factor</param>
            <returns>Scale feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.NonUniformScale(System.String,System.Boolean,System.Double,System.Double,System.Double)">
            <summary>
            Non-uniform scaling of the part
            </summary>
            <param name="Name">Name of the scaling</param>
            <param name="ScaleAboutCenter">true to scale around the center of the part</param>
            <param name="ScaleFactorX">X scale factor</param>
            <param name="ScaleFactorY">Y scale factor</param>
            <param name="ScaleFactorZ">Z scale factor</param>
            <returns>Scale feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddChamfer(System.String,AlibreScript.API.IChamferable,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a chamfer to a face or edge
            </summary>
            <param name="Name">Name of chamfer</param>
            <param name="Item">Face or edge to chamfer</param>
            <param name="Distance1">First chamfer distance</param>
            <param name="Distance2">Second chamfer distance</param>
            <param name="TangentPropagate">True to propagate the chamfer along connected edges</param>
            <returns>Chamfer feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddChamfer(System.String,IronPython.Runtime.List,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a chamfer to a set of faces and edges
            </summary>
            <param name="Name">Name of chamfer</param>
            <param name="Items">Faces and edges to chamfer</param>
            <param name="Distance1">First chamfer distance</param>
            <param name="Distance2">Second chamfer distance</param>
            <param name="TangentPropagate">True to propagate the chamfer along connected edges</param>
            <returns>Chamfer feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddChamfer(System.String,AlibreScript.API.IChamferable,System.Double,System.Boolean)">
            <summary>
            Adds a chamfer to a face or edge
            </summary>
            <param name="Name">Name of chamfer</param>
            <param name="Item">Face or edge to chamfer</param>
            <param name="Distance">Chamfer distance</param>
            <param name="TangentPropagate">True to propagate the chamfer along connected edges</param>
            <returns>Chamfer feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.GetEdges">
            <summary>
            Gets a python list of the current edges in the part
            </summary>
            <returns>Python list of edges</returns>
        </member>
    <member name="M:AlibreScript.API.Part.GetFaces">
            <summary>
            Gets a python list of the current faces in the part
            </summary>
            <returns>Python list of faces</returns>
        </member>
    <member name="M:AlibreScript.API.Part.GetVertices">
            <summary>
            Gets a python list of the current vertices in the part
            </summary>
            <returns>Python list of vertices</returns>
        </member>
    <member name="M:AlibreScript.API.Part.GetBoundingBox">
            <summary>
            Gets the bounding box for the part as eight points
            </summary>
            <returns>Python list of eight points as [P1, P2, ... P8]. Each point is [X, Y, Z]</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddChamfer(System.String,IronPython.Runtime.List,System.Double,System.Boolean)">
            <summary>
            Adds a chamfer to a set of faces and edges
            </summary>
            <param name="Name">Name of chamfer</param>
            <param name="Items">Faces and edges to chamfer</param>
            <param name="Distance">Chamfer distance</param>
            <param name="TangentPropagate">True to propagate the chamfer along connected edges</param>
            <returns>Chamfer feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddChamferAngle(System.String,AlibreScript.API.IChamferable,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a chamfer to a face or edge
            </summary>
            <param name="Name">Name of chamfer</param>
            <param name="Item">Face or edge to chamfer</param>
            <param name="Distance">Chamfer distance</param>
            <param name="Angle">Chamfer angle</param>
            <param name="TangentPropagate">True to propagate the chamfer along connected edges</param>
            <returns>Chamfer feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddChamferAngle(System.String,IronPython.Runtime.List,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a chamfer to a set of faces and edges
            </summary>
            <param name="Name">Name of chamfer</param>
            <param name="Items">Faces and edges to chamfer</param>
            <param name="Distance">Chamfer distance</param>
            <param name="Angle">Chamfer angle</param>
            <param name="TangentPropagate">True to propagate the chamfer along connected edges</param>
            <returns>Chamfer feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddVertexChamfer(System.String,AlibreScript.API.Vertex,System.Double,System.Double,System.Double)">
            <summary>
            Adds a chamfer to a vertex
            </summary>
            <param name="Name">Name of chamfer</param>
            <param name="Item">Vertex to chamfer</param>
            <param name="Distance1">First chamfer distance</param>
            <param name="Distance2">Second chamfer distance</param>
            <param name="Distance3">Third chamfer distance</param>
            <returns>Chamfer feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddVertexChamfer(System.String,IronPython.Runtime.List,System.Double,System.Double,System.Double)">
            <summary>
            Adds a chamfer to a set of vertices
            </summary>
            <param name="Name">Name of chamfer</param>
            <param name="Items">Vertices to chamfer</param>
            <param name="Distance1">First chamfer distance</param>
            <param name="Distance2">Second chamfer distance</param>
            <param name="Distance3">Third chamfer distance</param>
            <returns>Chamfer feature</returns>
        </member>
    <member name="M:AlibreScript.API.Part.Save">
            <summary>
            Saves the part using the current path and file name
            </summary>
        </member>
    <member name="M:AlibreScript.API.Part.Save(System.String)">
            <summary>
            Saves the part to a specific folder
            </summary>
            <param name="Folder">Folder to save to</param>
        </member>
    <member name="M:AlibreScript.API.Part.SaveAs(System.String,System.String)">
            <summary>
            Saves the part to a specific folder with a new name
            </summary>
            <param name="Folder">Folder to save to</param>
            <param name="NewName">New name for part</param>
        </member>
    <member name="M:AlibreScript.API.Part.Close">
            <summary>
            Closes the part
            If it is unsaved then changes will be lost
            </summary>
        </member>
    <member name="M:AlibreScript.API.Part.ExportSTL(System.String)">
            <summary>
            Exports the part as an STL file
            </summary>
            <param name="FileName">Path and name of STL file</param>
        </member>
    <member name="M:AlibreScript.API.Part.ExportRotatedSTL(System.String,AlibreScript.API.Face,System.Boolean,System.Boolean,System.Double,System.Double,System.Double)">
            <summary>
            Exports the part as an STL rotated so that a specific face is on the bottom
            </summary>
            <param name="FileName">Path and name of STL file</param>
            <param name="BottomFace">Face to use as bottom of part</param>
            <param name="ForcetoMillimeters">true to output STL in millimeters regardless of part units</param>
            <param name="UseCustomSettings">true to use custom STL settings, false to use settings in system properties</param>
            <param name="MaxCellSize">Custom max cell size</param>
            <param name="NormalDeviation">Custom normal deviation</param>
            <param name="SurfaceDeviation">Custom surface deviation</param>
        </member>
    <member name="M:AlibreScript.API.Part.DisplayUnits">
            <summary>
            Gets the display units for the part
            </summary>
            <returns>The display units</returns>
        </member>
    <member name="M:AlibreScript.API.Part.ExportSTEP203(System.String)">
            <summary>
            Exports the part as a STEP 203 file
            </summary>
            <param name="FileName">Path and name of STEP 203 file</param>
        </member>
    <member name="M:AlibreScript.API.Part.ExportSTEP214(System.String)">
            <summary>
            Exports the part as a STEP 214 file
            </summary>
            <param name="FileName">Path and name of STEP 214 file</param>
        </member>
    <member name="M:AlibreScript.API.Part.ExportIGES(System.String)">
            <summary>
            Exports the part as a IGES file
            </summary>
            <param name="FileName">Path and name of IGES file</param>
        </member>
    <member name="M:AlibreScript.API.Part.ExportSAT(System.String,System.Int32,System.Boolean)">
            <summary>
            Exports the part as a SAT file
            </summary>
            <param name="FileName">Path and name of SAT file</param>
            <param name="Version">Exported SAT file version</param>
            <param name="SaveColors">true to preseve colors</param>
        </member>
    <member name="M:AlibreScript.API.Part.ExportBIP(System.String)">
            <summary>
            Exports a keyshot file
            </summary>
            <param name="FileName">Path and name of keyshot file</param>
        </member>
    <member name="M:AlibreScript.API.Part.SetColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the part
            </summary>
            <param name="Red">Red component 0 - 255</param>
            <param name="Green">Green component 0 - 255</param>
            <param name="Blue">Blue component 0 - 255</param>
        </member>
    <member name="M:AlibreScript.API.Part.SaveSnapshot(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Saves the current view as a bitmap image
            </summary>
            <param name="FileName">Path and name of file to save to</param>
            <param name="Width">Width in pixels</param>
            <param name="Height">Height in pixels</param>
            <param name="UseAspectRatio">if true uses greater of width/height along with current aspect ratio</param>
            <param name="UseWidthandHeight">if true uses current width/height of view</param>
        </member>
    <member name="M:AlibreScript.API.Part.SaveThumbnail(System.String,System.Int32,System.Int32)">
            <summary>
            Saves a thumbnail image of the part
            </summary>
            <param name="FileName">Path and name of file to save to</param>
            <param name="Width">Width of thumbnail in pixels</param>
            <param name="Height">Height of thumbnail in pixels</param>
        </member>
    <member name="M:AlibreScript.API.Part.Select(AlibreScript.API.ISelectableGeometry)">
            <summary>
            Selects a face, edge, vertex, point, axis, plane, sketch
            </summary>
            <param name="FaceorEdge">Face, edge, vertex, point, axis plane or sketch to select</param>
        </member>
    <member name="M:AlibreScript.API.Part.Select(IronPython.Runtime.List)">
            <summary>
            Selects a group of faces, edges, vertices, points, axes, planes and sketches
            </summary>
            <param name="FacesEdgesList">List of Faces, edges, vertices, points, axes, planes and sketches to select [FaceA, FaceB, EdgeA, EdgeB, ...]</param>
        </member>
    <member name="M:AlibreScript.API.Part.SetUserData(System.String,IronPython.Runtime.PythonDictionary)">
            <summary>
            Sets user data
            </summary>
            <param name="Name">Data name of the format companyname.projectname.dataname</param>
            <param name="Dict">Python dictionary of data to store</param>
        </member>
    <member name="M:AlibreScript.API.Part.GetUserData(System.String)">
            <summary>
            Gets user data
            </summary>
            <param name="Name">Name of data to get</param>
            <returns>Data as a python dictionary or None if not found</returns>
        </member>
    <member name="M:AlibreScript.API.Part.PauseUpdating">
            <summary>
            Pauses updating the part user interface
            </summary>
        </member>
    <member name="M:AlibreScript.API.Part.ResumeUpdating">
            <summary>
            Resumes updating the part user interface
            </summary>
        </member>
    <member name="M:AlibreScript.API.Part.GetSelectionAssembly">
            <summary>
            The assembly that the part was selected on
            Only valid when a selection has been made
            </summary>
            <returns>Assembly or null for no assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPoint(System.String,AlibreScript.API.IPoint,System.Double,System.Double,System.Double)">
            <summary>
            Add a point at an offset to a point or a vertex
            </summary>
            <param name="Name">Name of point</param>
            <param name="PointOrVertex">Point or vertex</param>
            <param name="XOffset">X offse</param>
            <param name="YOffset">Y offset</param>
            <param name="ZOffset">Z offset</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPoint(System.String,AlibreScript.API.IPoint,AlibreScript.API.IPoint,System.Double)">
            <summary>
            Add a point between two points/vertices
            </summary>
            <param name="Name">Name of point</param>
            <param name="PointOrVertex1">First point or vertex</param>
            <param name="PointOrVertex2">Second point or vertex</param>
            <param name="Ratio">Ratio of distance between points/vertices</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPoint(System.String,AlibreScript.API.IAxis,AlibreScript.API.IAxis)">
            <summary>
            Add a point at the intersection or two axes or edges
            </summary>
            <param name="Name">Name of point</param>
            <param name="AxisOrEdge1">First axis or edge</param>
            <param name="AxisOrEdge2">Second axis or edge</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPoint(System.String,AlibreScript.API.IPlane,AlibreScript.API.IPlane,AlibreScript.API.IPlane)">
            <summary>
            Add a point at the intersection of three planes or faces
            </summary>
            <param name="Name">Name of point</param>
            <param name="PlaneOrFace1">First plane or face</param>
            <param name="PlaneOrFace2">Second plane or face</param>
            <param name="PlaneOrFace3">Third plane or face</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPoint(System.String,AlibreScript.API.IAxis,AlibreScript.API.IPlane)">
            <summary>
            Add a point at the the intersection of a axis or edge and a plane or face
            </summary>
            <param name="Name">Name of point</param>
            <param name="AxisOrEdge">Axis or edge</param>
            <param name="PlaneOrFace">Plane or face</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPoint(System.String,AlibreScript.API.IPoint,AlibreScript.API.IPlane,System.Double,System.Double)">
            <summary>
            Add a point by projecting a point or vertex onto a plane or face
            </summary>
            <param name="Name">Name of point</param>
            <param name="SourcePointOrVertex">Point or vertex to project</param>
            <param name="TargetPlaneOrFace">Plane or face to project onto</param>
            <param name="XOffset">X offset to apply to point once projected</param>
            <param name="YOffset">Y offset to apply to point once projected</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPoint(System.String,AlibreScript.API.Edge,System.Double)">
            <summary>
            Add a point on an edge
            </summary>
            <param name="Name">Name of point</param>
            <param name="TargetEdge">The edge to create the point on</param>
            <param name="Ratio">Ratio along the edge from 0.0 -&gt; 1.0</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPointFromCircularEdge(System.String,AlibreScript.API.Edge)">
            <summary>
            Adds a point at the center of a circular edge
            </summary>
            <param name="Name">Name of point</param>
            <param name="TargetEdge">The edge to use for creating the point</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPointFromToroidalFace(System.String,AlibreScript.API.Face)">
            <summary>
            Adds a point at the center of a toroidal face
            </summary>
            <param name="Name">Name of point</param>
            <param name="TargetFace">Toroidal face to use in creating the point</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Part.IsOpen">
            <summary>
            Checks if the part is opened
            </summary>
            <returns></returns>
        </member>
    <member name="M:AlibreScript.API.Part.GetFeature(System.String)">
            <summary>
            Gets a feature on the part
            </summary>
            <param name="Name">Name of the feature to get</param>
            <returns>The feature or null if not found</returns>
        </member>
    <member name="M:AlibreScript.API.Part.RemoveFeature(System.String)">
            <summary>
            Removes a feature from the part
            </summary>
            <param name="Name">Name of the feature to remove</param>
        </member>
    <member name="M:AlibreScript.API.Part.RemoveFeature(AlibreScript.API.Feature)">
            <summary>
            Removes a feature from the part
            </summary>
            <param name="Feature">Feature to remove</param>
        </member>
    <member name="M:AlibreScript.API.Part.SuppressFeature(System.String)">
            <summary>
            Suppresses a feature on the part
            </summary>
            <param name="Name">Name of the feature to suppress</param>
        </member>
    <member name="M:AlibreScript.API.Part.SuppressFeature(AlibreScript.API.Feature)">
            <summary>
            Suppresses a feature on the part
            </summary>
            <param name="Feature">Feature to suppress</param>
        </member>
    <member name="M:AlibreScript.API.Part.UnsuppressFeature(System.String)">
            <summary>
            Unsuppresses a feature on the part
            </summary>
            <param name="Name">Name of the feature to unsuppress</param>
        </member>
    <member name="M:AlibreScript.API.Part.UnsuppressFeature(AlibreScript.API.Feature)">
            <summary>
            Unsuppresses a feature on the part
            </summary>
            <param name="Feature">Feature to unsuppress</param>
        </member>
    <member name="M:AlibreScript.API.Part.HideFeature(System.String)">
            <summary>
            Hides a feature on the part
            </summary>
            <param name="Name">Name of the feature to hide</param>
        </member>
    <member name="M:AlibreScript.API.Part.HideFeature(AlibreScript.API.Feature)">
            <summary>
            Hides a feature on the part
            </summary>
            <param name="Feature">Feature to hide</param>
        </member>
    <member name="M:AlibreScript.API.Part.ShowFeature(System.String)">
            <summary>
            Shows a feature on the part
            </summary>
            <param name="Name">Name of the feature to show</param>
        </member>
    <member name="M:AlibreScript.API.Part.ShowFeature(AlibreScript.API.Feature)">
            <summary>
            Shows a feature on the part
            </summary>
            <param name="Feature">Feature to show</param>
        </member>
    <member name="M:AlibreScript.API.Part.GetPlane(System.String)">
            <summary>
            Gets a plane using the name of the plane
            </summary>
            <param name="Name">Name of plane to find</param>
            <returns>The plane</returns>
        </member>
    <member name="M:AlibreScript.API.Part.GetAxis(System.String)">
            <summary>
            Gets an axis from an axis name
            </summary>
            <param name="Name">Name of axis to find</param>
            <returns>Found axis</returns>
        </member>
    <member name="M:AlibreScript.API.Part.GetPoint(System.String)">
            <summary>
            Gets a point on the part using the point name. The point must have been created in a script
            </summary>
            <param name="Name">Name of point to get</param>
            <returns>Point on the part</returns>
        </member>
    <member name="M:AlibreScript.API.Part.GetSketch(System.String)">
            <summary>
            Gets a sketch using the name of the sketch
            </summary>
            <param name="Name">Name of sketch</param>
            <returns>Sketch object</returns>
        </member>
    <member name="M:AlibreScript.API.Part.Get3DSketch(System.String)">
            <summary>
            Gets a sketch using the name of the sketch
            </summary>
            <param name="Name">Name of sketch</param>
            <returns>Sketch object</returns>
        </member>
    <member name="M:AlibreScript.API.Part.GetFace(System.String)">
            <summary>
            Gets a face using it's name "Face&lt;n&gt;"
            </summary>
            <param name="Name">Name of face</param>
            <returns>Face if found</returns>
        </member>
    <member name="M:AlibreScript.API.Part.GetEdge(System.String)">
            <summary>
            Gets an edge using it's name "Edge&lt;n&gt;"
            </summary>
            <param name="Name">Name of edge</param>
            <returns>Edge if found</returns>
        </member>
    <member name="M:AlibreScript.API.Part.GetVertex(System.String)">
            <summary>
            Gets a vertex using it's name "Vertex&lt;n&gt;"
            </summary>
            <param name="Name">Name of vertex</param>
            <returns>Vertex if found</returns>
        </member>
    <member name="M:AlibreScript.API.Part.GetParameter(System.String)">
            <summary>
            Gets a parameter with a specific name
            </summary>
            <param name="Name">Name of parameter</param>
            <returns>Parameter object</returns>
        </member>
    <member name="M:AlibreScript.API.Part.GetCustomProperty(System.String)">
            <summary>
            Gets the value of a custonm property
            </summary>
            <param name="Name">Name of the custom property</param>
            <returns>The value of the property as a string</returns>
        </member>
    <member name="M:AlibreScript.API.Part.SetCustomProperty(System.String,System.String)">
            <summary>
            Sets the value of a custom property
            The custom property must already be defined on the part or defined on the user's PC
            </summary>
            <param name="Name">Name of the custom property</param>
            <param name="Value">New value for the custom property</param>
        </member>
    <member name="M:AlibreScript.API.Part.GetConfiguration(System.String)">
            <summary>
            Gets a configuration with a specific name
            </summary>
            <param name="Name">Name of confguration</param>
            <returns>Configuration object</returns>
        </member>
    <member name="M:AlibreScript.API.Part.GetActiveConfiguration">
            <summary>
            Gets the currently active configuration
            </summary>
            <returns>Configuration object</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPlane(System.String,AlibreScript.API.ISketchSurface,System.Double)">
            <summary>
            Creates a plane based on the offset from an existing plane
            </summary>
            <param name="Name">Name of plane</param>
            <param name="SourcePlane">Plane/face to use as basis</param>
            <param name="Offset">Offset from basis plane in currently chosen units</param>
            <returns>Created plane</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPlane(System.String,IronPython.Runtime.List,IronPython.Runtime.List)">
            <summary>
            Adds a plane using a normal vector and a point on the plane
            </summary>
            <param name="Name">Name of plane to add</param>
            <param name="NormalVector">Normal vector as a list [nx, ny, nz]. Does not need to be a unit vector</param>
            <param name="PointonPlane">A point on the plane as a list [px, py, pz]</param>
            <returns>Created plane</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPlane(System.String,AlibreScript.API.Axis,AlibreScript.API.Point)">
            <summary>
            Creates a new plane contaning an axis and a point
            </summary>
            <param name="Name">Name of new plane</param>
            <param name="Axis">Axis that lies on plane</param>
            <param name="Point">Point that lies on plane</param>
            <returns>New plane</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPlane(System.String,AlibreScript.API.ISketchSurface,AlibreScript.API.Axis,System.Double)">
            <summary>
            Creates a new plane at an angle to an existing plane
            </summary>
            <param name="Name">Name of new plane</param>
            <param name="SourcePlane">Plane/face to use as basis for new plane</param>
            <param name="RotationAxis">Axis of rotation for new plane</param>
            <param name="Angle">Angle of new plane in degrees</param>
            <returns>New plane</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddParameter(System.String,AlibreScript.API.ParameterTypes,System.Double)">
            <summary>
            Adds a cm/mm/in/deg parameter to the part
            </summary>
            <param name="Name">Name of parameter</param>
            <param name="Type">Type of parameter</param>
            <param name="Value">Value for parameter</param>
            <returns>New parameter</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddParameter(System.String,AlibreScript.API.ParameterTypes,AlibreScript.API.ParameterUnits,System.Double)">
            <summary>
            Adds a parameter to the part with specific units
            </summary>
            <param name="Name">Name of parameter</param>
            <param name="Type">Type of parameter</param>
            <param name="UnitstoUse">Units to use</param>
            <param name="Value">Value for parameter</param>
            <returns>New parameter</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddParameter(System.String,AlibreScript.API.ParameterTypes,System.String)">
            NOTE: DOESN'T SEEM TO WORK IN GD V16 - THROWS EXCEPTION ABOUT TRANSACTION ALREADY BEING OPEN
            <summary>
            Adds a parameter to the part
            </summary>
            <param name="Name">Name of parameter</param>
            <param name="Type">Type of parameter</param>
            <param name="Equation">Equation for parameter</param>
            <returns>New parameter</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddConfiguration(System.String)">
            <summary>
            Adds a configuration to the part
            </summary>
            <param name="Name">Name of configuration</param>
            <returns>New configuration</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddConfiguration(System.String,System.String)">
            <summary>
            Adds a configuration to the part using another configuration as a base
            </summary>
            <param name="Name">Name of configuration</param>
            <param name="BaseConfigurationName">Name of base configuration to use</param>
            <returns>New configuration</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddPlane(System.String,IronPython.Runtime.List,IronPython.Runtime.List,IronPython.Runtime.List)">
            <summary>
            Creates a plane using three points. Each point is defined as list of [x, y, z]
            </summary>
            <param name="Name">Name of plane</param>
            <param name="Point1">Point on plane</param>
            <param name="Point2">Point on plane</param>
            <param name="Point3">Point on plane</param>
            <returns>Created plane</returns>
        </member>
    <member name="M:AlibreScript.API.Part.AddSketch(System.String,AlibreScript.API.ISketchSurface)">
            <summary>
            Creates a new sketch using a plane/face
            </summary>
            <param name="Name">Name of sketch</param>
            <param name="Plane">Plane/face to use for sketch</param>
            <returns>Created sketch</returns>
        </member>
    <member name="P:AlibreScript.API.AssembledPart.Name">
            <summary>
            Name of the assembled part
            </summary>
        </member>
    <member name="P:AlibreScript.API.AssembledPart.Configurations">
            <summary>
            List of configurations defined on the part
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Parameters">
            <summary>
            List of parameters defined on the part
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Density">
            <summary>
            Density of the part
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Material">
            <summary>
            Material of the part
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Description">
            <summary>
            Description of the part
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Number">
            <summary>
            User-defined number for the part
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Mass">
            <summary>
            Mass of the part
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Comment">
            <summary>
            Comment property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.CostCenter">
            <summary>
            Cost center property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.CreatedBy">
            <summary>
            Created By property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.CreatedDate">
            <summary>
            Created Date property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.CreatingApplication">
            <summary>
            Creating Application property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.DocumentNumber">
            <summary>
            Document Number property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.EngineeringApprovalDate">
            <summary>
            Engineering Approval Date property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.EngineeringApprovedBy">
            <summary>
            Engineering Approved By property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.EstimatedCost">
            <summary>
            Estimated Cost property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Keywords">
            <summary>
            Keywords property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.LastAuthor">
            <summary>
            Last Author property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.LastUpdateDate">
            <summary>
            Last Update Date property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.ExtendedMaterialInformation">
            <summary>
            Material (extended information) property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.ManufacturingApprovedBy">
            <summary>
            Manufacturing Approved By property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.ManufacturingApprovedDate">
            <summary>
            Product property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.ModifiedInformation">
            <summary>
            Modified Information property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Product">
            <summary>
            Product property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.ReceivedFrom">
            <summary>
            Received From property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Revision">
            <summary>
            Revision property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.StockSize">
            <summary>
            Stock Size property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Supplier">
            <summary>
            Supplier property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Title">
            <summary>
            Title property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Vendor">
            <summary>
            Vendor property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.WebLink">
            <summary>
            Web Link property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.FileName">
            <summary>
            Path and filename of the part
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.XYPlane">
            <summary>
            Gets the XY-plane (language independent)
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.YZPlane">
            <summary>
            Gets the YZ-plane (language independent)
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.ZXPlane">
            <summary>
            Gets the ZX-plane (language independent)
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.XAxis">
            <summary>
            Gets the X-axis (language independent)
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.YAxis">
            <summary>
            Gets the Y-axis (language independent)
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.ZAxis">
            <summary>
            Gets the Z-axis (language independent)
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Origin">
            <summary>
            Gets the origin (language independent)
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Selections">
            <summary>
            Gets the currently selected items as [ItemA, ItemB, ...]
            Supports faces, edges, vertices, planes, axes and points
            </summary>
        </member>
    <member name="M:AlibreScript.API.AssembledSubAssembly.GetSelectionAssembly">
            <summary>
            The assembly that the edge was selected on
            Only valid when a selection has been made
            </summary>
            <returns>Assembly or null for no assembly</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledSubAssembly.GetMappedOccurrence(AlibreX.IADAssemblySession)">
            <summary>
            Gets the occurrence of the sub-assembly mapped into the 
            occurrence structure of a specific assembly
            This occurrence can be used to create constraints in the specific
            sub-assembly using the part
            </summary>
            <param name="Assembly">Assembly for occurrence structure</param>
            <returns>Mapped occurrence or null if not found</returns>
        </member>
    <member name="M:AlibreScript.API.AssembledSubAssembly.GetConfiguration(System.String)">
            <summary>
            Gets a configuration with a specific name
            </summary>
            <param name="Name">Name of confguration</param>
            <returns>Configuration object</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddSubAssembly(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Adds a sub-assembly to the assembly
            </summary>
            <param name="FileName">Path and name of sub-assembly to open</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <returns>The added sub-assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddSubAssembly(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a sub-assembly to the assembly
            </summary>
            <param name="FileName">Path and name of sub-asembly to open</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="TranslationFirst">if true translation occurs before rotation, if false rotation
            occurs before translation</param>
            <returns>The added assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddMateConstraint(System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable)">
            <summary>
            Adds a simple mate constraint between two planes/faces/axes/edges/points
            </summary>
            <param name="Distance">Mate distance</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddMateConstraint(System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,System.Boolean,System.String)">
            <summary>
            Adds a simple mate constraint between two planes/faces/axes/edges/points
            </summary>
            <param name="Distance">Mate distance</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
            <param name="IsReversed">true to reverse constraint</param>
            <param name="Name">Name of constraint</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddMateConstraint2(System.Double,System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,System.Boolean,System.String,AlibreScript.API.Assembly.ConstraintBoundsType)">
            <summary>
            Adds a mate constraint between two planes/faces/axes/edges/points
            Uses bounds type
            </summary>
            <param name="Distance1">Mate distance</param>
            <param name="Distance2">Second distance for 'between' bounds type or zero if not used</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
            <param name="IsReversed">true to reverse constraint</param>
            <param name="Name">Name of constraint</param>
            <param name="BoundsType">The bounds type to use</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddFastenerConstraint(System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,System.Boolean,System.String)">
            <summary>
            Adds a fastner constraint
            </summary>
            <param name="Distance">Fastener to surface mate distance</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
            <param name="IsReversed">true to reverse constraint</param>
            <param name="Name">Name of constraint</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddFastenerConstraint2(System.Double,System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,System.Boolean,System.String,AlibreScript.API.Assembly.ConstraintBoundsType)">
            <summary>
            Adds a fastner constraint
            </summary>
            <param name="Distance1">Fastener to surface mate distance</param>
            <param name="Distance2">Second distance for 'between' bounds type or zero if not used</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
            <param name="IsReversed">true to reverse constraint</param>
            <param name="Name">Name of constraint</param>
            <param name="BoundsType">The bounds type to use</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddAlignConstraint(System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable)">
            <summary>
            Adds a simple alignment constraint between two planes/faces/axes/edges/points
            </summary>
            <param name="Distance">Alignment distance</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddAlignConstraint(System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,System.Boolean,System.String)">
            <summary>
            Adds a simple alignment constraint between two planes/faces/axes/edges/points
            </summary>
            <param name="Distance">Alignment distance</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
            <param name="IsReversed">true to reverse constraint</param>
            <param name="Name">Name of constraint</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddAlignConstraint2(System.Double,System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,System.Boolean,System.String,AlibreScript.API.Assembly.ConstraintBoundsType)">
            <summary>
            Adds an alignment constraint between two planes/faces/axes/edges/points
            Uses bounds type
            </summary>
            <param name="Distance1">Align distance</param>
            <param name="Distance2">Second distance for 'between' bounds type or zero if not used</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
            <param name="IsReversed">true to reverse constraint</param>
            <param name="Name">Name of constraint</param>
            <param name="BoundsType">The bounds type to use</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddOrientConstraint(System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable)">
            <summary>
            Adds an orient constraint between two planes/faces/axes/edges/points
            </summary>
            <param name="Value">Value</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddOrientConstraint(System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,System.Boolean,System.String)">
            <summary>
            Adds an orient constraint between two planes/faces/axes/edges/points
            </summary>
            <param name="Value">Value</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
            <param name="IsReversed">true to reverse constraint</param>
            <param name="Name">Name of constraint</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddAngleConstraint(System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable)">
            <summary>
            Adds an angle constraint between two planes/faces/axes/edges/points
            </summary>
            <param name="Angle">Angle in degrees</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddAngleConstraint(System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,System.Boolean,System.String)">
            <summary>
            Adds a simple angle constraint between two planes/faces/axes/edges/points
            </summary>
            <param name="Angle">Angle in degrees</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
            <param name="IsReversed">true to reverse constraint</param>
            <param name="Name">Name of constraint</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddAngleConstraint2(System.Double,System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,System.Boolean,System.String,AlibreScript.API.Assembly.ConstraintBoundsType)">
            <summary>
            Adds an angle constraint between two planes/faces/axes/edges/points
            Uses bounds type
            </summary>
            <param name="Angle1">Angle for constraint</param>
            <param name="Angle2">Second angle for 'between' bounds type or zero if not used</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
            <param name="IsReversed">true to reverse constraint</param>
            <param name="Name">Name of constraint</param>
            <param name="BoundsType">The bounds type to use</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddGearConstraint(System.Double,System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,System.Boolean,System.String)">
            <summary>
            Adds a gear constraint using ratio RatioA:RatioB
            </summary>
            <param name="RatioA">First value in gear ratio</param>
            <param name="RatioB">Second value in gear ratio</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
            <param name="IsReversed">true to reverse constraint</param>
            <param name="Name">Name of constraint</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddRackAndPinionConstraint(System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,System.Boolean,System.String)">
            <summary>
            Adds a rack and pinion constraint
            </summary>
            <param name="PitchDiameter">Pitch diameter</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
            <param name="IsReversed">true to reverse constraint</param>
            <param name="Name">Name of constraint</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddScrewConstraint(System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,System.Boolean,System.String)">
            <summary>
            Adds a screw constraint
            </summary>
            <param name="ThreadPitch">Pitch of thread</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
            <param name="IsReversed">true to reverse constraint</param>
            <param name="Name">Name of constraint</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddTangentConstraint(System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,System.Boolean)">
            <summary>
            Adds a tangent constraint between two planes/faces/axes/edges/points
            </summary>
            <param name="Distance">Alignment distance</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
            <param name="Outside">true for an outside tangent constraint, false for an inside tangent constraint</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddTangentConstraint(System.Double,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,AlibreScript.API.IAssembled,AlibreScript.API.IConstrainable,System.Boolean,System.Boolean,System.String)">
            <summary>
            Adds a tangent constraint between two planes/faces/axes/edges/points
            </summary>
            <param name="Distance">Alignment distance</param>
            <param name="PartorAssemblyA">First part/assembly to constrain</param>
            <param name="ItemA">Plane/face/axis/edge/point on first part/assembly to constrain</param>
            <param name="PartorAssemblyB">Second part/assembly to constrain</param>
            <param name="ItemB">Plane/face/axis/edge/point on second part/assembly to constrain</param>
            <param name="Outside">true for an outside tangent constraint, false for an inside tangent constraint</param>
            <param name="IsReversed">true to reverse constraint</param>
            <param name="Name">Name of constraint</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.CreateUniqueName(System.String)">
            <summary>
            Creates a unique name that can be used to safely add a part or subassembly to the assembly
            if the names used in the assembly are not known in advance
            </summary>
            <param name="BaseName">Base name to use</param>
            <returns>Unique name</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.ExportSTL(System.String)">
            <summary>
            Exports the assembly as an STL file
            </summary>
            <param name="FileName">Path and name of STL file</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.ExportSTEP203(System.String)">
            <summary>
            Exports the assembly as a STEP 203 file
            </summary>
            <param name="FileName">Path and name of STEP 203 file</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.ExportSTEP214(System.String)">
            <summary>
            Exports the assembly as a STEP 214 file
            </summary>
            <param name="FileName">Path and name of STEP 214 file</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.ExportIGES(System.String)">
            <summary>
            Exports the assembly as a IGES file
            </summary>
            <param name="FileName">Path and name of IGES file</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.ExportSAT(System.String,System.Int32,System.Boolean)">
            <summary>
            Exports the assembly as a SAT file
            </summary>
            <param name="FileName">Path and name of SAT file</param>
            <param name="Version">Exported SAT file version</param>
            <param name="SaveColors">true to preseve colors</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.ExportBIP(System.String)">
            <summary>
            Exports a keyshot file
            </summary>
            <param name="FileName">Path and name of keyshot file</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.SetUserData(System.String,IronPython.Runtime.PythonDictionary)">
            <summary>
            Sets user data
            </summary>
            <param name="Name">Data name of the format companyname.projectname.dataname</param>
            <param name="Dict">Python dictionary of data to store</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.GetUserData(System.String)">
            <summary>
            Gets user data
            </summary>
            <param name="Name">Name of data to get</param>
            <returns>Data as a python dictionary or None if not found</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.PauseUpdating">
            <summary>
            Pauses updating the assembly user interface
            </summary>
        </member>
    <member name="M:AlibreScript.API.Assembly.ResumeUpdating">
            <summary>
            Resumes updating the assembly user interface
            </summary>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPoint(System.String,AlibreScript.API.IPoint,System.Double,System.Double,System.Double)">
            <summary>
            Add a point at an offset to a point or a vertex
            </summary>
            <param name="Name">Name of point</param>
            <param name="PointOrVertex">Point or vertex</param>
            <param name="XOffset">X offse</param>
            <param name="YOffset">Y offset</param>
            <param name="ZOffset">Z offset</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPoint(System.String,AlibreScript.API.IPoint,AlibreScript.API.IPoint,System.Double)">
            <summary>
            Add a point between two points/vertices
            </summary>
            <param name="Name">Name of point</param>
            <param name="PointOrVertex1">First point or vertex</param>
            <param name="PointOrVertex2">Second point or vertex</param>
            <param name="Ratio">Ratio of distance between points/vertices</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPoint(System.String,AlibreScript.API.IAxis,AlibreScript.API.IAxis)">
            <summary>
            Add a point at the intersection or two axes or edges
            </summary>
            <param name="Name">Name of point</param>
            <param name="AxisOrEdge1">First axis or edge</param>
            <param name="AxisOrEdge2">Second axis or edge</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPoint(System.String,AlibreScript.API.IPlane,AlibreScript.API.IPlane,AlibreScript.API.IPlane)">
            <summary>
            Add a point at the intersection of three planes or faces
            </summary>
            <param name="Name">Name of point</param>
            <param name="PlaneOrFace1">First plane or face</param>
            <param name="PlaneOrFace2">Second plane or face</param>
            <param name="PlaneOrFace3">Third plane or face</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPoint(System.String,AlibreScript.API.IAxis,AlibreScript.API.IPlane)">
            <summary>
            Add a point at the the intersection of a axis or edge and a plane or face
            </summary>
            <param name="Name">Name of point</param>
            <param name="AxisOrEdge">Axis or edge</param>
            <param name="PlaneOrFace">Plane or face</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPoint(System.String,AlibreScript.API.IPoint,AlibreScript.API.IPlane,System.Double,System.Double)">
            <summary>
            Add a point by projecting a point or vertex onto a plane or face
            </summary>
            <param name="Name">Name of point</param>
            <param name="SourcePointOrVertex">Point or vertex to project</param>
            <param name="TargetPlaneOrFace">Plane or face to project onto</param>
            <param name="XOffset">X offset to apply to point once projected</param>
            <param name="YOffset">Y offset to apply to point once projected</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPoint(System.String,AlibreScript.API.Edge,System.Double)">
            <summary>
            Add a point on an edge
            </summary>
            <param name="Name">Name of point</param>
            <param name="TargetEdge">The edge to create the point on</param>
            <param name="Ratio">Ratio along the edge from 0.0 -&gt; 1.0</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPointFromCircularEdge(System.String,AlibreScript.API.Edge)">
            <summary>
            Adds a point at the center of a circular edge
            </summary>
            <param name="Name">Name of point</param>
            <param name="TargetEdge">The edge to use for creating the point</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPointFromToroidalFace(System.String,AlibreScript.API.Face)">
            <summary>
            Adds a point at the center of a toroidal face
            </summary>
            <param name="Name">Name of point</param>
            <param name="TargetFace">Toroidal face to use in creating the point</param>
            <returns>The created point</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.GetPlane(System.String)">
            <summary>
            Gets a plane using the name of the plane
            </summary>
            <param name="Name">Name of plane to find</param>
            <returns>The plane</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.GetAxis(System.String)">
            <summary>
            Gets an axis from an axis name
            </summary>
            <param name="Name">Name of axis to find</param>
            <returns>Found axis</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.GetPoint(System.String)">
            <summary>
            Gets a point on the assembly using the point name. The point must have been created in a script
            </summary>
            <param name="Name">Name of point to get</param>
            <returns>The point</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.GetParameter(System.String)">
            <summary>
            Gets a parameter with a specific name
            </summary>
            <param name="Name">Name of parameter</param>
            <returns>Parameter object</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.GetCustomProperty(System.String)">
            <summary>
            Gets the value of a custonm property
            </summary>
            <param name="Name">Name of the custom property</param>
            <returns>The value of the property as a string</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.SetCustomProperty(System.String,System.String)">
            <summary>
            Sets the value of a custom property
            The custom property must already be defined on the assembly or defined on the user's PC
            </summary>
            <param name="Name">Name of the custom property</param>
            <param name="Value">New value for the custom property</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.GetConfiguration(System.String)">
            <summary>
            Gets a configuration with a specific name
            </summary>
            <param name="Name">Name of confguration</param>
            <returns>Configuration object</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.GetActiveConfiguration">
            <summary>
            Gets the currently active configuration
            </summary>
            <returns>Configuration object</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPlane(System.String,AlibreScript.API.ISketchSurface,System.Double)">
            <summary>
            Creates a plane based on the offset from an existing plane
            </summary>
            <param name="Name">Name of plane</param>
            <param name="SourcePlane">Plane/face to use as basis</param>
            <param name="Offset">Offset from basis plane in currently chosen units</param>
            <returns>Created plane</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPlane(System.String,IronPython.Runtime.List,IronPython.Runtime.List)">
            <summary>
            Adds a plane using a normal vector and a point on the plane
            </summary>
            <param name="Name">Name of plane to add</param>
            <param name="NormalVector">Normal vector as a list [nx, ny, nz]. Does not need to be a unit vector</param>
            <param name="PointonPlane">A point on the plane as a list [px, py, pz]</param>
            <returns>Created plane</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPlane(System.String,AlibreScript.API.ISketchSurface,AlibreScript.API.Axis,System.Double)">
            <summary>
            Creates a new plane at an angle to an existing plane
            </summary>
            <param name="Name">Name of new plane</param>
            <param name="SourcePlane">Plane/face to use as basis for new plane</param>
            <param name="RotationAxis">Axis of rotation for new plane</param>
            <param name="Angle">Angle of new plane in degrees</param>
            <returns>New plane</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddParameter(System.String,AlibreScript.API.ParameterTypes,System.Double)">
            <summary>
            Adds a parameter to the assembly
            </summary>
            <param name="Name">Name of parameter</param>
            <param name="Type">Type of parameter</param>
            <param name="Value">Value for parameter</param>
            <returns>New parameter</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddParameter(System.String,AlibreScript.API.ParameterTypes,System.String)">
            <summary>
            Adds a parameter to the assembly
            NOTE: DOESN'T SEEM TO WORK IN GD V16 - THROWS EXCEPTION ABOUT TRANSACTION ALREADY BEING OPEN
            </summary>
            <param name="Name">Name of parameter</param>
            <param name="Type">Type of parameter</param>
            <param name="Equation">Equation for parameter</param>
            <returns>New parameter</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddConfiguration(System.String)">
            <summary>
            Adds a configuration to the assembly
            </summary>
            <param name="Name">Name of configuration</param>
            <returns>New configuration</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddConfiguration(System.String,System.String)">
            <summary>
            Adds a configuration to the assembly using another configuration as a base
            </summary>
            <param name="Name">Name of configuration</param>
            <param name="BaseConfigurationName">Name of base configuration to use</param>
            <returns>New configuration</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPlane(System.String,IronPython.Runtime.List,IronPython.Runtime.List,IronPython.Runtime.List)">
            <summary>
            Creates a plane using three points
            </summary>
            <param name="Name">Name of plane</param>
            <param name="Point1">Point on plane</param>
            <param name="Point2">Point on plane</param>
            <param name="Point3">Point on plane</param>
            <returns>Created plane</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddAxis(System.String,AlibreScript.API.ISketchSurface,AlibreScript.API.ISketchSurface)">
            <summary>
            Creates an axis based on the intersection of two planes/faces
            </summary>
            <param name="Name">Name of axis</param>
            <param name="Plane1">First plane/face</param>
            <param name="Plane2">Second plane/face</param>
            <returns>New Axis</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddAxis(System.String,IronPython.Runtime.List,IronPython.Runtime.List)">
            <summary>
            Creates an axis based on two points
            </summary>
            <param name="Name">Name of axis</param>
            <param name="Point1">First point</param>
            <param name="Point2">Second point</param>
            <returns>New axis</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPoint(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Adds a point to the assembly
            </summary>
            <param name="Name">Name of new point</param>
            <param name="X">X coordinate</param>
            <param name="Y">Y coordinate</param>
            <param name="Z">Z coordinate</param>
            <returns>The new point</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPoints(System.String,IronPython.Runtime.List)">
            <summary>
            Adds a set of points to the part
            </summary>
            <param name="Prefix">Prefix for the point names</param>
            <param name="Points">List of points [x1,y1,z1, ..., xn,yn,zn]</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.Regenerate">
            <summary>
            Regenerates the assembly
            </summary>
        </member>
    <member name="M:AlibreScript.API.Assembly.Save">
            <summary>
            Saves the assembly using the current path and file name
            </summary>
        </member>
    <member name="M:AlibreScript.API.Assembly.Save(System.String)">
            <summary>
            Saves the assembly to a specific folder
            </summary>
            <param name="Folder">Folder to save to</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.SaveAs(System.String,System.String)">
            <summary>
            Saves the assembly to a specific folder with a new name
            </summary>
            <param name="Folder">Folder to save to</param>
            <param name="NewName">New name for assembly</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.SaveAll(System.String)">
            <summary>
            Save the assembly and all parts/sub-assemblies to a folder
            </summary>
            <param name="Folder">Folder to save to</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.SaveSnapshot(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Saves the current view as a bitmap image
            </summary>
            <param name="FileName">Path and mame of file to save to</param>
            <param name="Width">Width in pixels</param>
            <param name="Height">Height in pixels</param>
            <param name="UseAspectRatio">if true uses greater of width/height along with current aspect ratio</param>
            <param name="UseWidthandHeight">if true uses current width/height of view</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.Close">
            <summary>
            Closes the assembly
            If it is unsaved then changes will be lost
            </summary>
        </member>
    <member name="M:AlibreScript.API.Assembly.SaveThumbnail(System.String,System.Int32,System.Int32)">
            <summary>
            Saves a thumbnail image of the assembly
            </summary>
            <param name="FileName">Path and name of file to save to</param>
            <param name="Width">Width of thumbnail in pixels</param>
            <param name="Height">Height of thumbnail in pixels</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPart(System.String,System.String)">
            <summary>
            Adds a part to the assembly at the origin
            </summary>
            <param name="Folder">Folder containing part</param>
            <param name="Name">Name of part to open</param>
            <returns>The added part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPart(System.String,System.String,System.Double,System.Double,System.Double)">
            <summary>
            Adds a part to the assembly
            </summary>
            <param name="Folder">Folder containing part</param>
            <param name="Name">Name of part to open</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <returns>The added part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPart(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a part to the assembly
            </summary>
            <param name="Folder">Folder containing part</param>
            <param name="Name">Name of part to open</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="TranslationFirst">if true translation occurs before rotation, if false rotation
            occurs before translation</param>
            <returns>The added part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPart(AlibreScript.API.Part)">
            <summary>
            Adds a part to the assembly at the origin
            </summary>
            <param name="Part">Part to add</param>
            <returns>The added part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPart(AlibreScript.API.Part,System.Double,System.Double,System.Double)">
            <summary>
            Adds a part to the assembly
            </summary>
            <param name="Part">Part to add</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <returns>The added part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPart(System.String)">
            <summary>
            Adds a part to the assembly at the origin
            </summary>
            <param name="FileName">Path and name of part to open</param>
            <returns>The added part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPart(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Adds a part to the assembly
            </summary>
            <param name="FileName">Path and name of part to open</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <returns>The added part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPart(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a part to the assembly
            </summary>
            <param name="FileName">Path and name of part to open</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="TranslationFirst">if true translation occurs before rotation, if false rotation
            occurs before translation</param>
            <returns>The added part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.GetPartOrientation(AlibreScript.API.AssembledPart)">
            <summary>
            Gets the orientation of a part in an assembly
            </summary>
            <param name="Part">Part in an assembly</param>
            <returns>Part orientation as [OffsetX, OffsetY, OffsetZ, AngleX, AngleY, AngleZ], translation before rotation</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.GetPartOrientation(System.String)">
            <summary>
            Gets the orientation of a part in an assembly
            </summary>
            <param name="PartName">Name of part to get orientation</param>
            <returns>Part orientation as [OffsetX, OffsetY, OffsetZ, AngleX, AngleY, AngleZ], translation before rotation</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.DisplayUnits">
            <summary>
            Gets the display units for the assembly
            </summary>
            <returns>The display units</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddPart(AlibreScript.API.Part,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a part to the assembly
            </summary>
            <param name="Part">Part to add</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="TranslationFirst">if true translation occurs before rotation, if false rotation
            occurs before translation</param>
            <returns>The added part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddNewPart(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Adds a new part to the assembly
            </summary>
            <param name="Name">Name of the new part</param>
            <param name="X">X location of part</param>
            <param name="Y">Y location of part</param>
            <param name="Z">Z location of part</param>
            <returns>New part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.GetPart(System.String)">
            <summary>
            Gets a part in the assembly
            </summary>
            <param name="Name">Name of part instance to get</param>
            <returns>The part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.GetSubAssembly(System.String)">
            <summary>
            Gets a sub-assembly in the assembly
            </summary>
            <param name="Name">Name of sub-assembly instance to get</param>
            <returns>The sub-assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.DuplicatePart(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Duplicates a part in the assembly
            </summary>
            <param name="Name">Name of part to duplicate</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <returns>The duplicate part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.DuplicatePart(AlibreScript.API.AssembledPart,System.Double,System.Double,System.Double)">
            <summary>
            Duplicates a part in the assembly
            </summary>
            <param name="Part">Part to duplicate</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <returns>The duplicate part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.DuplicatePart(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Duplicates a part in the assembly
            </summary>
            <param name="Name">Name of part to duplicate</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="TranslationFirst">if true translation occurs before rotation, if false rotation
            occurs before translation</param>
            <returns>The duplicate part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.DuplicatePart(AlibreScript.API.AssembledPart,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Duplicates a part in the assembly
            </summary>
            <param name="Part">Part to duplicate</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="TranslationFirst">if true translation occurs before rotation, if false rotation
            occurs before translation</param>
            <returns>The duplicate part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.DuplicateSubAssembly(AlibreScript.API.AssembledSubAssembly,System.Double,System.Double,System.Double)">
            <summary>
            Duplicates a sub-assembly in the assembly
            </summary>
            <param name="SubAssembly">Sub-assembly to duplicate</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <returns>The duplicate sub-assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.DuplicateSubAssembly(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Duplicates a sub-assembly in the assembly
            </summary>
            <param name="Name">Name of sub-assembly to duplicate</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <returns>The duplicate sub-assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.DuplicateSubAssembly(AlibreScript.API.AssembledSubAssembly,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Duplicates a sub-assembly in the assembly
            </summary>
            <param name="SubAssembly">Sub-assembly to duplicate</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="TranslationFirst">if true translation occurs before rotation, if false rotation
            occurs before translation</param>
            <returns>The duplicate sub-assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.DuplicateSubAssembly(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Duplicates a sub-assembly in the assembly
            </summary>
            <param name="Name">Name of sub-assembly to duplicate</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="TranslationFirst">if true translation occurs before rotation, if false rotation
            occurs before translation</param>
            <returns>The duplicate sub-assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AnchorPart(System.String)">
            <summary>
            Anchors a part
            </summary>
            <param name="Name">Name of part to anchor</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AnchorPart(AlibreScript.API.AssembledPart)">
            <summary>
            Anchors a part
            </summary>
            <param name="Part">Part to anchor</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AnchorSubAssembly(System.String)">
            <summary>
            Anchors a sub-assembly
            </summary>
            <param name="Name">Name of sub-assembly to anchor</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.UnanchorPart(System.String)">
            <summary>
            Un-anchors a part
            </summary>
            <param name="Name">Name of part to un-anchor</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.UnanchorPart(AlibreScript.API.AssembledPart)">
            <summary>
            Un-anchors a part
            </summary>
            <param name="Part">Part to un-anchor</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.UnanchorSubAssembly(System.String)">
            <summary>
            Un-anchors a sub-assembly
            </summary>
            <param name="Name">Name of sub-assembly to un-anchor</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.HidePart(System.String)">
            <summary>
            Hides a part
            </summary>
            <param name="Name">Name of part to hide</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.HidePart(AlibreScript.API.AssembledPart)">
            <summary>
            Hides a part
            </summary>
            <param name="Part">Part to hide</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.HideSubAssembly(System.String)">
            <summary>
            Hides a sub-assembly
            </summary>
            <param name="Name">Name of sub-assembly to hide</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.ShowPart(System.String)">
            <summary>
            Shows a part
            </summary>
            <param name="Name">Name of part to show</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.ShowPart(AlibreScript.API.AssembledPart)">
            <summary>
            Shows a part
            </summary>
            <param name="Part">Part to show</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.ShowSubAssembly(System.String)">
            <summary>
            Shows a sub-assembly
            </summary>
            <param name="Name">Name of sub-assembly to show</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.SuppressPart(System.String)">
            <summary>
            Suppresses a part
            </summary>
            <param name="Name">Name of part to suppress</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.SuppressPart(AlibreScript.API.AssembledPart)">
            <summary>
            Suppresses a part
            </summary>
            <param name="Part">Part to suppress</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.SuppressSubAssembly(System.String)">
            <summary>
            Suppresses a sub-assembly
            </summary>
            <param name="Name">Name of sub-assembly to suppress</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.UnsuppressPart(System.String)">
            <summary>
            Un-suppresses a part
            </summary>
            <param name="Name">Name of part to un-suppress</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.UnsuppressPart(AlibreScript.API.AssembledPart)">
            <summary>
            Un-suppresses a part
            </summary>
            <param name="Part">Part to un-suppress</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.UnsuppressSubAssembly(System.String)">
            <summary>
            Un-suppresses a sub-assembly
            </summary>
            <param name="Name">Name of sub-assembly to un-suppress</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.MovePart(System.String,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Moves a part
            </summary>
            <param name="Name">Name of part to move</param>
            <param name="OffsetX">X offset to apply</param>
            <param name="OffsetY">Y offset to apply</param>
            <param name="OffsetZ">Z offset to apply</param>
            <param name="ApplyConstraints">true to apply constraints</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.MovePart(AlibreScript.API.AssembledPart,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Moves a part
            </summary>
            <param name="Part">Part to move</param>
            <param name="OffsetX">X offset to apply</param>
            <param name="OffsetY">Y offset to apply</param>
            <param name="OffsetZ">Z offset to apply</param>
            <param name="ApplyConstraints">true to apply constraints</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.MoveSubAssembly(System.String,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Moves a sub-assembly
            </summary>
            <param name="Name">Name of sub-assembly to move</param>
            <param name="OffsetX">X offset to apply</param>
            <param name="OffsetY">Y offset to apply</param>
            <param name="OffsetZ">Z offset to apply</param>
            <param name="ApplyConstraints">true to apply constraints</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.MoveSubAssembly(AlibreScript.API.AssembledSubAssembly,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Moves a sub-assembly
            </summary>
            <param name="SubAssembly">Sub-assembly to move</param>
            <param name="OffsetX">X offset to apply</param>
            <param name="OffsetY">Y offset to apply</param>
            <param name="OffsetZ">Z offset to apply</param>
            <param name="ApplyConstraints">true to apply constraints</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.MoveParts(IronPython.Runtime.List,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Moves a set of parts
            </summary>
            <param name="Names">Names of parts to move</param>
            <param name="OffsetX">X offset to apply</param>
            <param name="OffsetY">Y offset to apply</param>
            <param name="OffsetZ">Z offset to apply</param>
            <param name="ApplyConstraints">true to apply constraints</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.MoveSubAssemblies(IronPython.Runtime.List,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Moves a set of sub-assemblies
            </summary>
            <param name="Names">Names of sub-assemblies to move</param>
            <param name="OffsetX">X offset to apply</param>
            <param name="OffsetY">Y offset to apply</param>
            <param name="OffsetZ">Z offset to apply</param>
            <param name="ApplyConstraints">true to apply constraints</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.RotatePart(System.String,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Rotates a part
            </summary>
            <param name="Name">Name of part to rotate</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="ApplyConstraints">true to apply constraints</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.RotatePart(AlibreScript.API.AssembledPart,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Rotates a part
            </summary>
            <param name="Part">Part to rotate</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="ApplyConstraints">true to apply constraints</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.RotateSubAssembly(System.String,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Rotates a sub-assembly
            </summary>
            <param name="Name">Name of sub-assembly to rotate</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="ApplyConstraints">true to apply constraints</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.RotateSubAssembly(AlibreScript.API.AssembledSubAssembly,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Rotates a sub-assembly
            </summary>
            <param name="SubAssembly">Sub-assembly to rotate</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="ApplyConstraints">true to apply constraints</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.RotateSubAssembly(AlibreX.IADOccurrence,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Rotates a sub-assembly
            </summary>
            <param name="AssemOcc">Occurence of sub-assembly to rotate</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="ApplyConstraints">true to apply constraints</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.RotateParts(IronPython.Runtime.List,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Rotates a set of parts
            </summary>
            <param name="Names">Names of parts to rotate</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="ApplyConstraints">true to apply constraints</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.RotateSubAssemblies(IronPython.Runtime.List,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Rotates a set of sub-assemblies
            </summary>
            <param name="Names">Names of sub-assemblies to rotate</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="ApplyConstraints">true to apply constraints</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddNewSubAssembly(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Adds a new sub-assembly to the assembly
            </summary>
            <param name="Name">Name of the new assembly</param>
            <param name="X">X location of assembly</param>
            <param name="Y">Y location of assembly</param>
            <param name="Z">Z location of assembly</param>
            <returns>New part</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddSubAssembly(AlibreScript.API.Assembly)">
            <summary>
            Adds a sub-assembly to the assembly at the origin
            </summary>
            <param name="Assembly">Assembly to add</param>
            <returns>The added assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddSubAssembly(AlibreScript.API.Assembly,System.Double,System.Double,System.Double)">
            <summary>
            Adds a sub-assembly to the assembly
            </summary>
            <param name="Assembly">Assembly to add</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <returns>The added assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddSubAssembly(AlibreScript.API.Assembly,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a sub-assembly to the assembly
            </summary>
            <param name="Assembly">Sub-assembly to add</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="TranslationFirst">if true translation occurs before rotation, if false rotation
            occurs before translation</param>
            <returns>The added sub-assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddSubAssembly(System.String,System.String)">
            <summary>
            Adds a sub-assembly to the assembly at the origin
            </summary>
            <param name="Folder">Folder containing sub-assembly</param>
            <param name="Name">Name of sub-assembly to open</param>
            <returns>The added sub-assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddSubAssembly(System.String,System.String,System.Double,System.Double,System.Double)">
            <summary>
            Adds a sub-assembly to the assembly
            </summary>
            <param name="Folder">Folder containing sub-assembly</param>
            <param name="Name">Name of sub-assembly to open</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <returns>The added sub-assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddSubAssembly(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a sub-assembly to the assembly
            </summary>
            <param name="Folder">Folder containing sub-assembly</param>
            <param name="Name">Name of sub-assembly to open</param>
            <param name="OffsetX">X offset</param>
            <param name="OffsetY">Y offset</param>
            <param name="OffsetZ">Z offset</param>
            <param name="AngleX">X rotation angle in degrees</param>
            <param name="AngleY">Y rotation angle in degrees</param>
            <param name="AngleZ">Z rotation angle in degrees</param>
            <param name="TranslationFirst">if true translation occurs before rotation, if false rotation
            occurs before translation</param>
            <returns>The added sub-assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Assembly.AddSubAssembly(System.String)">
            <summary>
            Adds a sub-assembly to the assembly at the origin
            </summary>
            <param name="FileName">Path and name of sub-assembly to open</param>
            <returns>The added sub-assembly</returns>
        </member>
    <member name="P:AlibreScript.API.AssembledSubAssembly.Name">
            <summary>
            Name of the subassembly
            </summary>
        </member>
    <member name="P:AlibreScript.API.AssembledSubAssembly.Configurations">
            <summary>
            A list of configurations defined on the assembly
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Parameters">
            <summary>
            A list of parameters defined on the assembly
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Parts">
            <summary>
            A list of parts defined on the assembly
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.SubAssemblies">
            <summary>
            A list of subassemblies defined on the assembly
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.FileName">
            <summary>
            Path and filename of the assembly
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.XYPlane">
            <summary>
            Gets the XY-plane (language independent)
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.YZPlane">
            <summary>
            Gets the YZ-plane (language independent)
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.ZXPlane">
            <summary>
            Gets the ZX-plane (language independent)
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.XAxis">
            <summary>
            Gets the X-axis (language independent)
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.YAxis">
            <summary>
            Gets the Y-axis (language independent)
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.ZAxis">
            <summary>
            Gets the Z-axis (language independent)
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Origin">
            <summary>
            Gets the origin (language independent)
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Selections">
            <summary>
            Gets the currently selected items as [ItemA, ItemB, ...]
            Supports subassemblies, parts, faces, edges, vertices, planes, axes and points
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Comment">
            <summary>
            Comment property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.CostCenter">
            <summary>
            Cost center property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.CreatedBy">
            <summary>
            Created By property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.CreatedDate">
            <summary>
            Created Date property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.CreatingApplication">
            <summary>
            Creating Application property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.DocumentNumber">
            <summary>
            Document Number property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.EngineeringApprovalDate">
            <summary>
            Engineering Approval Date property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.EngineeringApprovedBy">
            <summary>
            Engineering Approved By property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.EstimatedCost">
            <summary>
            Estimated Cost property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Keywords">
            <summary>
            Keywords property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.LastAuthor">
            <summary>
            Last Author property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.LastUpdateDate">
            <summary>
            Last Update Date property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.ExtendedMaterialInformation">
            <summary>
            Material (extended information) property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.ManufacturingApprovedBy">
            <summary>
            Manufacturing Approved By property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.ManufacturingApprovedDate">
            <summary>
            Product property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.ModifiedInformation">
            <summary>
            Modified Information property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Product">
            <summary>
            Product property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.ReceivedFrom">
            <summary>
            Received From property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Revision">
            <summary>
            Revision property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.StockSize">
            <summary>
            Stock Size property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Supplier">
            <summary>
            Supplier property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Title">
            <summary>
            Title property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Vendor">
            <summary>
            Vendor property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.WebLink">
            <summary>
            Web Link property
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Density">
            <summary>
            Density of the part
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Material">
            <summary>
            Material of the part
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Description">
            <summary>
            Description of the part
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Number">
            <summary>
            User-defined number for the part
            </summary>
        </member>
    <member name="M:AlibreScript.API.Axis.GetPart">
            <summary>
            Gets the part that the axis is defined on
            </summary>
            <returns>Part that defines the axis</returns>
        </member>
    <member name="M:AlibreScript.API.Axis.GetSelectionAssembly">
            <summary>
            The assembly that the edge was selected on
            Only valid when a selection has been made
            </summary>
            <returns>Assembly or null for no assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Axis.Hide">
            <summary>
            Hides the axis
            </summary>
        </member>
    <member name="M:AlibreScript.API.Axis.Show">
            <summary>
            Shows the axis
            </summary>
        </member>
    <member name="P:AlibreScript.API.Axis.Name">
            <summary>
            The name of the axis
            </summary>
        </member>
    <member name="M:AlibreScript.API.Bspline3D.GetX(System.Double)">
            <summary>
            Gets the X value of the spline at a location along the spline
            </summary>
            <param name="u">Location along the spline. 0.0 = start, 1.0 = end</param>
            <returns>X value of spline at the specified location</returns>
        </member>
    <member name="M:AlibreScript.API.Bspline3D.GetY(System.Double)">
            <summary>
            Gets the Y value of the spline at a location along the spline
            </summary>
            <param name="u">Location along the spline. 0.0 = start, 1.0 = end</param>
            <returns>Y value of spline at the specified location</returns>
        </member>
    <member name="M:AlibreScript.API.Bspline3D.GetZ(System.Double)">
            <summary>
            Gets the Z value of the spline at a location along the spline
            </summary>
            <param name="u">Location along the spline. 0.0 = start, 1.0 = end</param>
            <returns>Y value of spline at the specified location</returns>
        </member>
    <member name="M:AlibreScript.API.Bspline3D.GetPointAt(System.Double)">
            <summary>
            Gets a point on the spline
            </summary>
            <param name="u">Location along the spline. 0.0 = start, 1.0 = end</param>
            <returns>Point on the spline at the specified location [X, Y, Z]</returns>
        </member>
    <member name="M:AlibreScript.API.Bspline3D.GetNormalAt(System.Double)">
            <summary>
            Gets the normal vector at a point on the spline
            </summary>
            <param name="u">Location along the spline. 0.0 = start, 1.0 = end</param>
            <returns>Vector for point on the spline at the specified location (A, B, C)</returns>
        </member>
    <member name="M:AlibreScript.API.Bspline3D.Subdivide(System.Int32)">
            <summary>
            Divides the Bspline up into segments
            </summary>
            <param name="Segments">Number of segments to obtain</param>
            <returns>List of points between segments [X1, Y1, Z1, X2, Y2, Z2, ...]</returns>
        </member>
    <member name="M:AlibreScript.API.Bspline3D.SubdivideGetNormals(System.Int32)">
            <summary>
            Divides the Bspline up into segments and gets the normal for each point
            </summary>
            <param name="Segments">Number of segments to obtain</param>
            <returns>List of points between segments and normals [X1, Y1, Z1, A1, B1, C1, X2, Y2, Z2, A2, B2, C2, ...]</returns>
        </member>
    <member name="M:AlibreScript.API.Bspline3D.#ctor(System.Int32,IronPython.Runtime.List,IronPython.Runtime.List,IronPython.Runtime.List,System.Boolean)">
            <summary>
            Creates a bspline
            </summary>
            <param name="Order">Order of the bspline</param>
            <param name="ControlPoints">Value of control points [Point1X, Point1Y, ...]</param>
            <param name="KnotVectors">Knot vectors [KnotVector1, KnotVector2, ...]</param>
            <param name="Weights">Point weights [Weight1, Weight2, ...]</param>
            <param name="IsReference">True if a reference bspline, false if a regular bspline</param>
        </member>
    <member name="P:AlibreScript.API.Bspline3D.ControlPoints">
            <summary>
            The control points [x1, y1, ..., xn, yn]
            </summary>
        </member>
    <member name="P:AlibreScript.API.Bspline3D.Weights">
            <summary>
            The weights [w1, w2, ..., wn]
            </summary>
        </member>
    <member name="P:AlibreScript.API.Bspline3D.KnotVectors">
            <summary>
            The knot vectors [k1, k2, ..., kn]
            </summary>
        </member>
    <member name="P:AlibreScript.API.Bspline3D.IsReference">
            <summary>
            True if the bspline is a reference bspline, false if it is a regular bspline
            </summary>
        </member>
    <member name="P:AlibreScript.API.Bspline3D.Order">
            <summary>
            The order of the bspline
            </summary>
        </member>
    <member name="P:AlibreScript.API.Bspline3D.Length">
            <summary>
            Gets the length of the Bspline
            </summary>
        </member>
    <member name="M:AlibreScript.API.Bspline.GetX(System.Double)">
            <summary>
            Gets the X value of the spline at a location along the spline
            </summary>
            <param name="u">Location along the spline. 0.0 = start, 1.0 = end</param>
            <returns>X value of spline at the specified location</returns>
        </member>
    <member name="M:AlibreScript.API.Bspline.GetY(System.Double)">
            <summary>
            Gets the Y value of the spline at a location along the spline
            </summary>
            <param name="u">Location along the spline. 0.0 = start, 1.0 = end</param>
            <returns>Y value of spline at the specified location</returns>
        </member>
    <member name="M:AlibreScript.API.Bspline.GetPointAt(System.Double)">
            <summary>
            Gets a point on the spline
            </summary>
            <param name="u">Location along the spline. 0.0 = start, 1.0 = end</param>
            <returns>Point on the spline at the specified location [X, Y]</returns>
        </member>
    <member name="M:AlibreScript.API.Bspline.GetNormalAt(System.Double)">
            <summary>
            Gets the normal vector at a point on the spline
            </summary>
            <param name="u">Location along the spline. 0.0 = start, 1.0 = end</param>
            <returns>Vector for point on the spline at the specified location (A, B)</returns>
        </member>
    <member name="M:AlibreScript.API.Bspline.Subdivide(System.Int32)">
            <summary>
            Divides the Bspline up into segments
            </summary>
            <param name="Segments">Number of segments to obtain</param>
            <returns>List of points between segments [X1, Y1, X2, Y2, ...]</returns>
        </member>
    <member name="M:AlibreScript.API.Bspline.#ctor(System.Int32,IronPython.Runtime.List,IronPython.Runtime.List,IronPython.Runtime.List,System.Boolean)">
            <summary>
            Creates a bspline
            </summary>
            <param name="Order">Order of the bspline</param>
            <param name="ControlPoints">Value of control points [Point1X, Point1Y, ...]</param>
            <param name="KnotVectors">Knot vectors [KnotVector1, KnotVector2, ...]</param>
            <param name="Weights">Point weights [Weight1, Weight2, ...]</param>
            <param name="IsReference">True if a reference bspline, false if a regular bspline</param>
        </member>
    <member name="P:AlibreScript.API.Bspline.ControlPoints">
            <summary>
            The control points [x1, y1, ..., xn, yn]
            </summary>
        </member>
    <member name="P:AlibreScript.API.Bspline.Weights">
            <summary>
            The weights [w1, w2, ..., wn]
            </summary>
        </member>
    <member name="P:AlibreScript.API.Bspline.KnotVectors">
            <summary>
            The knot vectors [k1, k2, ..., kn]
            </summary>
        </member>
    <member name="P:AlibreScript.API.Bspline.IsReference">
            <summary>
            True if the bspline is a reference bspline, false if it is a regular bspline
            </summary>
        </member>
    <member name="P:AlibreScript.API.Bspline.Order">
            <summary>
            The order of the bspline
            </summary>
        </member>
    <member name="P:AlibreScript.API.Bspline.Length">
            <summary>
            Gets the length of the Bspline
            </summary>
        </member>
    <member name="M:AlibreScript.API.Circle.#ctor(IronPython.Runtime.List,System.Double,System.Boolean)">
            <summary>
            Creates a 2D circle which can be added to sketches
            </summary>
            <param name="Center">Center of the circle as a python list [x, y]</param>
            <param name="Radius">Radius of circle</param>
            <param name="IsReference">True to create a reference circle</param>
        </member>
    <member name="P:AlibreScript.API.Circle.CenterPoint">
            <summary>
            The center of the circle as a sketch point
            </summary>
        </member>
    <member name="P:AlibreScript.API.Circle.Center">
            <summary>
            The center of the circle [x, y]
            </summary>
        </member>
    <member name="P:AlibreScript.API.Circle.Radius">
            <summary>
            Radius of the circle
            </summary>
        </member>
    <member name="P:AlibreScript.API.Circle.IsReference">
            <summary>
            True if the circle is a reference circle, false if it is a regular circle
            </summary>
        </member>
    <member name="P:AlibreScript.API.Circle.Length">
            <summary>
            The length of the circle circumference in script units
            </summary>
        </member>
    <member name="M:AlibreScript.API.CircularArc3D.#ctor(IronPython.Runtime.List,IronPython.Runtime.List,IronPython.Runtime.List,System.Boolean)">
            <summary>
            Creates an arc using the center, start point and end point
            </summary>
            <param name="Center">Center of the arc</param>
            <param name="Start">Start point of the arc</param>
            <param name="End">End point of the arc</param>
            <param name="IsReference">True to create a reference arc, false to create a regular arc</param>
        </member>
    <member name="M:AlibreScript.API.CircularArc3D.#ctor(IronPython.Runtime.List,IronPython.Runtime.List,System.Double,System.Boolean)">
            <summary>
            Creates an arc using the center, start point and an angle
            </summary>
            <param name="Center">Location of center of arc</param>
            <param name="Start">Location of start of arc</param>
            <param name="Angle">Angle of arc</param>
            <param name="IsReference">True if a reference arc, false if a regular arc</param>
        </member>
    <member name="P:AlibreScript.API.CircularArc3D.Center">
            <summary>
            The center of the arc [x, y, z]
            </summary>
        </member>
    <member name="P:AlibreScript.API.CircularArc3D.StartPoint">
            <summary>
            The start point of the arc [x, y, z]
            </summary>
        </member>
    <member name="P:AlibreScript.API.CircularArc3D.EndPoint">
            <summary>
            The end point of the arc [x, y, z]
            </summary>
        </member>
    <member name="P:AlibreScript.API.CircularArc3D.Radius">
            <summary>
            Radius of arc
            </summary>
        </member>
    <member name="P:AlibreScript.API.CircularArc3D.Angle">
            <summary>
            Angle of arc
            </summary>
        </member>
    <member name="P:AlibreScript.API.CircularArc3D.Type">
            <summary>
            Type of arc
            </summary>
        </member>
    <member name="P:AlibreScript.API.CircularArc3D.IsReference">
            <summary>
            True if the arc is a reference arc, false if it is a regular arc
            </summary>
        </member>
    <member name="T:AlibreScript.API.CircularArc3D.ArcType">
            <summary>
            Types of circular arcs
            </summary>
        </member>
    <member name="M:AlibreScript.API.CircularArc.#ctor(IronPython.Runtime.List,IronPython.Runtime.List,IronPython.Runtime.List,System.Boolean)">
            <summary>
            Creates an arc using the center, start point and end point
            </summary>
            <param name="Center">Center of the arc</param>
            <param name="Start">Start point of the arc</param>
            <param name="End">End point of the arc</param>
            <param name="IsReference">True to create a reference arc, false to create a regular arc</param>
        </member>
    <member name="M:AlibreScript.API.CircularArc.#ctor(IronPython.Runtime.List,IronPython.Runtime.List,System.Double,System.Boolean)">
            <summary>
            Creates an arc using the center, start point and an angle
            </summary>
            <param name="Center">Location of center of arc</param>
            <param name="Start">Location of start of arc</param>
            <param name="Angle">Angle of arc</param>
            <param name="IsReference">True if a reference arc, false if a regular arc</param>
        </member>
    <member name="P:AlibreScript.API.CircularArc.Center">
            <summary>
            The center of the arc [x, y]
            </summary>
        </member>
    <member name="P:AlibreScript.API.CircularArc.StartPoint">
            <summary>
            The start point of the arc [x, y]
            </summary>
        </member>
    <member name="P:AlibreScript.API.CircularArc.EndPoint">
            <summary>
            The end point of the arc [x, y]
            </summary>
        </member>
    <member name="P:AlibreScript.API.CircularArc.Start">
            <summary>
            The start point as a sketchpoint object
            </summary>
        </member>
    <member name="P:AlibreScript.API.CircularArc.End">
            <summary>
            The end point as a sketchpoint object
            </summary>
        </member>
    <member name="P:AlibreScript.API.CircularArc.CenterPoint">
            <summary>
            The center point as a sketchpoint object
            </summary>
        </member>
    <member name="P:AlibreScript.API.CircularArc.Radius">
            <summary>
            Radius of arc
            </summary>
        </member>
    <member name="P:AlibreScript.API.CircularArc.Angle">
            <summary>
            Angle of arc
            </summary>
        </member>
    <member name="P:AlibreScript.API.CircularArc.Type">
            <summary>
            Type of arc
            </summary>
        </member>
    <member name="P:AlibreScript.API.CircularArc.IsReference">
            <summary>
            True if the arc is a reference arc, false if it is a regular arc
            </summary>
        </member>
    <member name="T:AlibreScript.API.CircularArc.ArcType">
            <summary>
            Types of circular arcs
            </summary>
        </member>
    <member name="M:AlibreScript.API.CSharp.CompileAndRun(System.String)">
            <summary>
            Compiles and runs C# code
            </summary>
            <param name="Code">Code to compile and run</param>
            <returns>Updated dictionary of variables</returns>
        </member>
    <member name="M:AlibreScript.API.CSharp.CompileAndRun(System.String,IronPython.Runtime.PythonDictionary)">
            <summary>
            Compiles and runs C# code
            </summary>
            <param name="Code">Code to compile and run</param>
            <param name="Variables">Dictionary of variables</param>
            <returns>Updated dictionary of variables</returns>
        </member>
    <member name="M:AlibreScript.API.CSharp.Compile(System.String)">
            <summary>
            Compiles C# code
            </summary>
            <param name="Code">Code to compile</param>
            <returns>Compiled code object</returns>
        </member>
    <member name="M:AlibreScript.API.CSharp.Run(Microsoft.CodeAnalysis.Scripting.Script{System.Object[]})">
            <summary>
            Runs compiled C# code
            </summary>
            <param name="Script">Compiled code object to run</param>
            <returns>Updated dictionary of variables</returns>
        </member>
    <member name="M:AlibreScript.API.CSharp.Run(Microsoft.CodeAnalysis.Scripting.Script{System.Object[]},IronPython.Runtime.PythonDictionary)">
            <summary>
            Runs compiled C# code
            </summary>
            <param name="Script">Compiled code object to run</param>
            <param name="Variables">Dictionary of variables or None for no variables</param>
            <returns>Updated dictionary of variables</returns>
        </member>
    <member name="M:AlibreScript.API.Ellipse.#ctor(IronPython.Runtime.List,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Creates an ellipse
            </summary>
            <param name="Center">Center of the ellipse</param>
            <param name="MajorRadius">Radius on the major axis</param>
            <param name="MajorAxisAngle">Angle of the major axis in degrees</param>
            <param name="MinorMajorRatio">Radius on the minor axis as a ratio of the major radius</param>
            <param name="IsReference">True to create a reference arc, false to create a regular arc</param>
        </member>
    <member name="P:AlibreScript.API.Ellipse.Center">
            <summary>
            The center of the ellipse [x, y]
            </summary>
        </member>
    <member name="P:AlibreScript.API.Ellipse.CenterPoint">
            <summary>
            The center point as a sketchpoint object
            </summary>
        </member>
    <member name="P:AlibreScript.API.Ellipse.Radius">
            <summary>
            Radius on major axis
            </summary>
        </member>
    <member name="P:AlibreScript.API.Ellipse.MajorAxisAngle">
            <summary>
            Angle of major axis
            </summary>
        </member>
    <member name="P:AlibreScript.API.Ellipse.MinorMajorRatio">
            <summary>
            Ratio of minor radius to major radius
            </summary>
        </member>
    <member name="P:AlibreScript.API.Ellipse.IsReference">
            <summary>
            True if the ellipse is a reference ellipse, false if it is a regular ellipse
            </summary>
        </member>
    <member name="M:AlibreScript.API.EllipticalArc.#ctor(IronPython.Runtime.List,IronPython.Runtime.List,IronPython.Runtime.List,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Creates an elliptical arc
            </summary>
            <param name="Center">Center of the elliptical arc</param>
            <param name="Start">The start point for the arc</param>
            <param name="End">The end point for the arc</param>
            <param name="MajorRadius">Radius on the major axis</param>
            <param name="MajorAxisAngle">Angle of the major axis in degrees</param>
            <param name="MinorMajorRatio">Radius on the minor axis as a ratio of the major radius</param>
            <param name="IsReference">True to create a reference arc, false to create a regular arc</param>
        </member>
    <member name="P:AlibreScript.API.EllipticalArc.Center">
            <summary>
            The center of the elliptical arc [x, y]
            </summary>
        </member>
    <member name="P:AlibreScript.API.EllipticalArc.StartPoint">
            <summary>
            The start point of the arc [x, y]
            </summary>
        </member>
    <member name="P:AlibreScript.API.EllipticalArc.EndPoint">
            <summary>
            The end point of the arc [x, y]
            </summary>
        </member>
    <member name="P:AlibreScript.API.EllipticalArc.CenterPoint">
            <summary>
            The center point as a sketchpoint object
            </summary>
        </member>
    <member name="P:AlibreScript.API.EllipticalArc.Start">
            <summary>
            The start point as a sketchpoint object
            </summary>
        </member>
    <member name="P:AlibreScript.API.EllipticalArc.End">
            <summary>
            The end point as a sketchpoint object
            </summary>
        </member>
    <member name="P:AlibreScript.API.EllipticalArc.Radius">
            <summary>
            Radius on major axis
            </summary>
        </member>
    <member name="P:AlibreScript.API.EllipticalArc.MajorAxisAngle">
            <summary>
            Angle of major axis
            </summary>
        </member>
    <member name="P:AlibreScript.API.EllipticalArc.MinorMajorRatio">
            <summary>
            Ratio of minor radius to major radius
            </summary>
        </member>
    <member name="P:AlibreScript.API.EllipticalArc.IsReference">
            <summary>
            True if the elliptical arc is a reference elliptical arc, false if it is a regular elliptical arc
            </summary>
        </member>
    <member name="M:AlibreScript.API.GlobalParameters.GetParameter(System.String)">
            <summary>
            Gets a parameter with a specific name
            </summary>
            <param name="Name">Name of parameter</param>
            <returns>Parameter object</returns>
        </member>
    <member name="M:AlibreScript.API.GlobalParameters.GetConfiguration(System.String)">
            <summary>
            Gets a configuration with a specific name
            </summary>
            <param name="Name">Name of confguration</param>
            <returns>Configuration object</returns>
        </member>
    <member name="M:AlibreScript.API.GlobalParameters.GetActiveConfiguration">
            <summary>
            Gets the currently active configuration
            </summary>
            <returns>Configuration object</returns>
        </member>
    <member name="M:AlibreScript.API.GlobalParameters.AddParameter(System.String,AlibreScript.API.ParameterTypes,System.Double)">
            <summary>
            Adds a parameter to the global parameters set
            </summary>
            <param name="Name">Name of parameter</param>
            <param name="Type">Type of parameter</param>
            <param name="Value">Value for parameter</param>
            <returns>New parameter</returns>
        </member>
    <member name="M:AlibreScript.API.GlobalParameters.AddParameter(System.String,AlibreScript.API.ParameterTypes,System.String)">
            <summary>
            Adds a parameter to the global parameters set
            </summary>
            <param name="Name">Name of parameter</param>
            <param name="Type">Type of parameter</param>
            <param name="Equation">Equation for parameter</param>
            <returns>New parameter</returns>
        </member>
    <member name="M:AlibreScript.API.GlobalParameters.AddConfiguration(System.String)">
            <summary>
            Adds a configuration to the global parameters set
            </summary>
            <param name="Name">Name of configuration</param>
            <returns>New configuration</returns>
        </member>
    <member name="M:AlibreScript.API.GlobalParameters.AddConfiguration(System.String,System.String)">
            <summary>
            Adds a configuration to the global parameters set using another configuration as a base
            </summary>
            <param name="Name">Name of configuration</param>
            <param name="BaseConfigurationName">Name of base configuration to use</param>
            <returns>New configuration</returns>
        </member>
    <member name="M:AlibreScript.API.GlobalParameters.Save">
            <summary>
            Saves the global parameters set using the current path and file name
            </summary>
        </member>
    <member name="M:AlibreScript.API.GlobalParameters.Save(System.String)">
            <summary>
            Saves the global parameters set to a specific folder
            </summary>
            <param name="Folder">Folder to save to</param>
        </member>
    <member name="M:AlibreScript.API.GlobalParameters.SaveAs(System.String,System.String)">
            <summary>
            Saves the global parameters set to a specific folder with a new name
            </summary>
            <param name="Folder">Folder to save to</param>
            <param name="NewName">New name for global parameters set</param>
        </member>
    <member name="M:AlibreScript.API.GlobalParameters.Close">
            <summary>
            Closes the global parameters set
            If it is unsaved then changes will be lost
            </summary>
        </member>
    <member name="M:AlibreScript.API.GlobalParameters.#ctor(System.String,System.String)">
            <summary>
            Opens an existing global parameters set
            </summary>
            <param name="Folder">Folder containing global parameters</param>
            <param name="Name">Name of global parameters to open</param>
        </member>
    <member name="M:AlibreScript.API.GlobalParameters.#ctor(System.String)">
            <summary>
            Creates a new global parameters set
            </summary>
            <param name="Name">Name of new global parameters set</param>
        </member>
    <member name="M:AlibreScript.API.GlobalParameters.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new global parameters set or accesses an already opened global parameters set
            </summary>
            <param name="Name">Name of global parameters set to create or access</param>
            <param name="CreateNew">True to create a new global parameters set, false to access an opened global parameters</param>
        </member>
    <member name="P:AlibreScript.API.GlobalParameters.Name">
            <summary>
            Name of the global parameters
            </summary>
        </member>
    <member name="P:AlibreScript.API.GlobalParameters.Parameters">
            <summary>
            A list of parameters
            </summary>
        </member>
    <member name="P:AlibreScript.API.GlobalParameters.Configurations">
            <summary>
            A list of configurations
            </summary>
        </member>
    <member name="M:AlibreScript.API.IAxis.GetOccurrence">
            <summary>
            Gets the part occurrence for this instance
            </summary>
            <returns>Occurrence of part</returns>
        </member>
    <member name="M:AlibreScript.API.IPlane.GetOccurrence">
            <summary>
            Gets the part occurrence for this instance
            </summary>
            <returns>Occurrence of part</returns>
        </member>
    <member name="M:AlibreScript.API.IPoint.PointObject">
            <summary>
            Low level object that represents the point
            </summary>
            <returns></returns>
        </member>
    <member name="M:AlibreScript.API.IPoint.GetOccurrence">
            <summary>
            Gets the part occurrence for this instance
            </summary>
            <returns>Occurrence of part</returns>
        </member>
    <member name="M:AlibreScript.API.Line3D.#ctor(IronPython.Runtime.List,IronPython.Runtime.List,System.Boolean)">
            <summary>
            Creates a new 3D line
            </summary>
            <param name="StartPoint">Location of the start point [x, y, z]</param>
            <param name="EndPoint">Location of the end point [x, y, z]</param>
            <param name="IsReference">True if a reference line</param>
        </member>
    <member name="P:AlibreScript.API.Line3D.StartPoint">
            <summary>
            The start point of the line [x, y, z]
            </summary>
        </member>
    <member name="P:AlibreScript.API.Line3D.EndPoint">
            <summary>
            The end point of the line [x, y, z]
            </summary>
        </member>
    <member name="P:AlibreScript.API.Line3D.IsReference">
            <summary>
            True if the line is a reference line, false if it is a regular line
            </summary>
        </member>
    <member name="P:AlibreScript.API.Line3D.Length">
            <summary>
            The length of the line in script units
            </summary>
        </member>
    <member name="P:AlibreScript.API.Line3D.Start">
            <summary>
            The start point as a sketchpoint object
            </summary>
        </member>
    <member name="P:AlibreScript.API.Line3D.End">
            <summary>
            The end point as a sketchpoint object
            </summary>
        </member>
    <member name="M:AlibreScript.API.Polyline3D.AddPoint(AlibreScript.API.PolylinePoint3D)">
            <summary>
            Adds a new point to the polyline
            </summary>
            <param name="Point">Point to add</param>
        </member>
    <member name="M:AlibreScript.API.Polyline3D.InsertPoint(System.Int32,AlibreScript.API.PolylinePoint3D)">
            <summary>
            Inserts a point at a specific location
            </summary>
            <param name="Index">0-based index of location to insert</param>
            <param name="Point">Point to insert</param>
        </member>
    <member name="M:AlibreScript.API.Polyline3D.AddPolyline(AlibreScript.API.Polyline3D)">
            <summary>
            Appends a line to the current line
            </summary>
            <param name="AppendLine">Line to append</param>
        </member>
    <member name="M:AlibreScript.API.Polyline3D.IsPointOnLine(AlibreScript.API.PolylinePoint3D,AlibreScript.API.PolylinePoint3D,AlibreScript.API.PolylinePoint3D,System.Double)">
            <summary>
            Determines if a point is on a line segment
            </summary>
            <param name="A">First point of line segment</param>
            <param name="B">Last point of line segment</param>
            <param name="P">Point to check</param>
            <param name="Tolerance">Fudge factor</param>
            <returns>True if point is on line</returns>
        </member>
    <member name="M:AlibreScript.API.Polyline3D.SplitAtPoint(AlibreScript.API.PolylinePoint3D,System.Double)">
            <summary>
            Splits a polyline at a point, creating two polylines
            </summary>
            <param name="SplitPoint">Point to split at</param>
            <param name="Tolerence">Tolerance to determine if point is on/near line</param>
            <returns>List of polylines [A, B]</returns>
        </member>
    <member name="M:AlibreScript.API.Polyline3D.Clone">
            <summary>
            Creates an exact copy of the line
            </summary>
            <returns>Copy of line</returns>
        </member>
    <member name="M:AlibreScript.API.Polyline3D.Clone(System.Int32,System.Int32)">
            <summary>
            Creates an exact copy of a section of the line
            </summary>
            <param name="StartIndex">0-based index of first point to include in copy</param>
            <param name="EndIndex">0-based index of last point to include in copy</param>
            <returns>Copied line</returns>
        </member>
    <member name="M:AlibreScript.API.Polyline3D.Join(AlibreScript.API.Polyline3D)">
            <summary>
            Joins a line onto the end of the current line and returns the new line
            </summary>
            <param name="AppendLine">The line to join to the current line</param>
            <returns>The new line created from this line plus the appended line</returns>
        </member>
    <member name="M:AlibreScript.API.Polyline3D.Offset(System.Double,System.Double,System.Double)">
            <summary>
            Applies an offset to all points on the line
            </summary>
            <param name="OffsetX">X offset to apply</param>
            <param name="OffsetY">Y offset to apply</param>
            <param name="OffsetZ">Z offset to apply</param>
        </member>
    <member name="M:AlibreScript.API.Polyline3D.RemoveDuplicates">
            <summary>
            Removes duplicate points that are next to each other
            </summary>
        </member>
    <member name="M:AlibreScript.API.Polyline3D.#ctor">
            <summary>
            Creates a new 3D polyline that can be later added to a 3D sketch
            </summary>
        </member>
    <member name="M:AlibreScript.API.Polyline3D.#ctor(IronPython.Runtime.List)">
            <summary>
            Creates a new 3D polyline that can be later added to a 3D sketch
            </summary>
            <param name="Points">List of points in the polyline [X1, Y1, Z1, X2, Y2, Z2, ...]</param>
        </member>
    <member name="M:AlibreScript.API.PolylinePoint3D.Offset(System.Double,System.Double,System.Double)">
            <summary>
            Applies an offset to the point and creates a new point
            </summary>
            <param name="X">X offset to apply</param>
            <param name="Y">Y offset to apply</param>
            <param name="Z">Z offset to apply</param>
            <returns>New point with offset applied</returns>
        </member>
    <member name="M:AlibreScript.API.PolylinePoint3D.Scale(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales the point location based on an origin for the scaling
            </summary>
            <param name="ScaleOriginX">X-coordinate for scaling origin</param>
            <param name="ScaleOriginY">Y-coordinate for scaling origin</param>
            <param name="ScaleOriginZ">Z-coordinate for scaling origin</param>
            <param name="ScaleFactor">Factor for scaling as a percentage</param>
            <returns>New point with scaling applied</returns>
        </member>
    <member name="M:AlibreScript.API.PolylinePoint3D.#ctor">
            <summary>
            Creates a new polyline point
            </summary>
        </member>
    <member name="M:AlibreScript.API.PolylinePoint3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new 3D polyline point
            </summary>
            <param name="X">X coordinate</param>
            <param name="Y">Y coordinate</param>
            <param name="Z">Z coordinate</param>
        </member>
    <member name="F:AlibreScript.API.PolylinePoint3D.X">
            <summary>
            X coordinate
            </summary>
        </member>
    <member name="F:AlibreScript.API.PolylinePoint3D.Y">
            <summary>
            Y coordinate
            </summary>
        </member>
    <member name="F:AlibreScript.API.PolylinePoint3D.Z">
            <summary>
            Z coordinate
            </summary>
        </member>
    <member name="M:AlibreScript.API.TwoD.RotatePoint(IronPython.Runtime.List,System.Double)">
            <summary>
            Rotates a point
            </summary>
            <param name="Point">Point to rotate as [X, Y]</param>
            <param name="Angle">Angle to rotate in degrees</param>
            <returns>Rotated point as [RX, RY]</returns>
        </member>
    <member name="M:AlibreScript.API.TwoD.GetPerpendicularVector(IronPython.Runtime.List)">
            <summary>
            Gets a vector that is perpendicular to a vector
            </summary>
            <param name="Vector">Vector [X, Y]</param>
            <returns>Vector that is perpendicular [X, Y]</returns>
        </member>
    <member name="M:AlibreScript.API.TwoD.NormalizeVector(IronPython.Runtime.List)">
            <summary>
            Normalizes a vector
            </summary>
            <param name="Vector">Vector [X, Y]</param>
            <returns>Normalized vector [X, Y]</returns>
        </member>
    <member name="T:AlibreScript.API.WindowsInputTypes">
            <summary>
            Type of Windows input
            </summary>
        </member>
    <member name="M:AlibreScript.API.Windows.CloseForm(System.String)">
            <summary>
            Close all currently open forms for a specific session
            </summary>
            <param name="SessionIdentifier">Identifier for session</param>
        </member>
    <member name="M:AlibreScript.API.Windows.GetDisplayedForm(System.String)">
            <summary>
            Gets the currently displayed form for a specific session
            </summary>
            <param name="SessionIdentifier">Identifier of session</param>
            <returns>Displayed form or null for none</returns>
        </member>
    <member name="M:AlibreScript.API.Windows.UtilityDialog(System.String,System.String,System.Object,System.Object,IronPython.Runtime.List,System.Int32)">
            <summary>
            Shows a dialog prompting the user to enter values
            The dialog remains open until the user clicks on the close button
            A callback function is called to give the input values to the script
            </summary>
            <param name="Title">Title of dialog window</param>
            <param name="ActionButtonText">Text for action button</param>
            <param name="ActionButtonCallback">Function called when the action button is clicked</param>
            <param name="InputChangedCallback">Function called when an input is changed</param>
            <param name="Inputs">List of input definitions [[Name, Type, DefaultValue, OptionalSettings], [...]]</param>
            <param name="InputAreaWidth">Width of dialog input area, optional</param>
        </member>
    <member name="M:AlibreScript.API.Windows.UtilityDialog(System.String,System.String,System.Object,System.Object,IronPython.Runtime.List,System.Int32,System.Object)">
            <summary>
            Shows a dialog prompting the user to enter values
            The dialog remains open until the user clicks on the close button
            A callback function is called to give the input values to the script
            </summary>
            <param name="Title">Title of dialog window</param>
            <param name="ActionButtonText">Text for action button</param>
            <param name="ActionButtonCallback">Function called when the action button is clicked</param>
            <param name="InputChangedCallback">Function called when an input is changed</param>
            <param name="Inputs">List of input definitions\n 
            [[Name, Type, DefaultValue, OptionalSettings], [...]]\n 
            Example: ['Image', WindowsInputTypes.Image, 'Logo.png']</param>
            <param name="InputAreaWidth">Width of dialog input area</param>
            <param name="UpdateUserInterfaceCallback">Function called after dialog is created to update the state of the dialog</param>
        </member>
    <member name="M:AlibreScript.API.Windows.OptionsDialog(System.String,IronPython.Runtime.List,System.Int32)">
            <summary>
            Shows a dialog prompting the user to enter values
            </summary>
            <param name="Title">Title of dialog window</param>
            <param name="Inputs">List of input definitions [[Name, Type, DefaultValue], [...]]</param>
            <param name="InputAreaWidth">Width of input area, optional</param>
            <returns>List of entered values</returns>
        </member>
    <member name="M:AlibreScript.API.Windows.OptionsDialog(System.String,IronPython.Runtime.List,System.Int32,System.Object,System.Object)">
            <summary>
            Shows a dialog prompting the user to enter values
            </summary>
            <param name="Title">Title of dialog window</param>
            <param name="Inputs">List of input definitions\n 
            [[Name, Type, DefaultValue, OptionalSettings], [...]]\n 
            Example: ['Image', WindowsInputTypes.Image, 'Logo.png']</param>
            <param name="InputAreaWidth">Width of input area</param>
            <param name="InputChangedCallback">Function called when an input is changed</param>
            <param name="UpdateUserInterfaceCallback">Function called after dialog is created to update the state of the dialog</param>
            <returns>List of entered values</returns>
        </member>
    <member name="M:AlibreScript.API.Windows.DisableInput(System.Int32)">
            <summary>
            Disables an input
            </summary>
            <param name="Index">Index of the input</param>
        </member>
    <member name="M:AlibreScript.API.Windows.EnableInput(System.Int32)">
            <summary>
            Enables an input
            </summary>
            <param name="Index">Index of the input</param>
        </member>
    <member name="M:AlibreScript.API.Windows.GetInputValue(System.Int32)">
            <summary>
            Gets the current value of an input
            </summary>
            <param name="Index">Index of the input</param>
            <returns>Current value</returns>
        </member>
    <member name="M:AlibreScript.API.Windows.SetStringList(System.Int32,System.Object)">
            <summary>
            Updates the list of strings for a stringlist input
            </summary>
            <param name="Index">Index of the stringlist input</param>
            <param name="Strings">New list of strings to show</param>
        </member>
    <member name="M:AlibreScript.API.Windows.SetInputValue(System.Int32,System.Object)">
            <summary>
            Sets the current value for an input
            </summary>
            <param name="Index">Index of the input</param>
            <param name="Value">Value to show</param>
        </member>
    <member name="M:AlibreScript.API.Windows.OpenFileDialog(System.String,System.String,System.String)">
            <summary>
            Prompts user to select a file
            </summary>
            <param name="Title">Title of dialog window</param>
            <param name="Filter">File filter, example filter: 'Part Files|*.AD_PRT'</param>
            <param name="DefaultExtension">Default file extension, e.g. '.AD_PRT'</param>
            <returns>Path and name of selected file or empty string if canceled</returns>
        </member>
    <member name="M:AlibreScript.API.Windows.SaveFileDialog(System.String,System.String,System.String)">
            <summary>
            Prompts user to save a file
            </summary>
            <param name="Title">Title of dialog window</param>
            <param name="Filter">File filter, example filter: 'Part Files|*.AD_PRT'</param>
            <param name="DefaultExtension">Default file extension, e.g. '.AD_PRT'</param>
            <returns>Path and name of selected file or empty string if canceled</returns>
        </member>
    <member name="M:AlibreScript.API.Windows.SelectFolderDialog(System.String,System.String)">
            <summary>
            Prompts the user to select a folder
            </summary>
            <param name="CurrentFolder">The current folder, if any</param>
            <param name="Description">Description of what is being chosen, shown to user</param>
            <returns>Path of selected folder or empty if canceled</returns>
        </member>
    <member name="M:AlibreScript.API.Windows.InfoDialog(System.String,System.String)">
            <summary>
            Shows an information window
            </summary>
            <param name="Message">Message to show</param>
            <param name="Title">Title of window</param>
        </member>
    <member name="M:AlibreScript.API.Windows.ErrorDialog(System.String,System.String)">
            <summary>
            Shows an error window
            </summary>
            <param name="Message">Error message</param>
            <param name="Title">Title of window</param>
        </member>
    <member name="M:AlibreScript.API.Windows.QuestionDialog(System.String,System.String)">
            <summary>
            Shows a question window
            </summary>
            <param name="Question">Question to show</param>
            <param name="Title">Title of window</param>
            <returns>true if 'yes' was clicked, false if 'no' was clicked</returns>
        </member>
    <member name="M:AlibreScript.API.Windows.#ctor">
            <summary>
            Creates a new Windows object allowing user interfaces to be constructed
            </summary>
        </member>
    <member name="T:AlibreScript.API.LockTypes">
            <summary>
            Type of configuration lock
            </summary>
        </member>
    <member name="M:AlibreScript.API.Configuration.SetLocks(AlibreScript.API.LockTypes)">
            <summary>
            Sets the locks on the configuration
            </summary>
            <param name="Locks">Locks to set</param>
        </member>
    <member name="M:AlibreScript.API.Configuration.LockAll">
            <summary>
            Applies all locks to the configuration
            </summary>
        </member>
    <member name="M:AlibreScript.API.Configuration.UnlockAll">
            <summary>
            Removes all locks from the configuration
            </summary>
        </member>
    <member name="M:AlibreScript.API.Configuration.Activate">
            <summary>
            Makes the configuration active
            </summary>
        </member>
    <member name="P:AlibreScript.API.Configuration.Name">
            <summary>
            The name of the configuration
            </summary>
        </member>
    <member name="P:AlibreScript.API.Configuration.IsActive">
            <summary>
            True if the configuration is currently active
            </summary>
        </member>
    <member name="M:AlibreScript.API.Assembly.#ctor(System.String,System.String)">
            <summary>
            Opens an existing assembly
            </summary>
            <param name="Folder">Folder containing assembly</param>
            <param name="Name">Name of assembly to open</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Opens an existing assembly, optionally hiding the editor
            </summary>
            <param name="Folder">Folder containing assembly</param>
            <param name="Name">Name of assembly to open</param>
            <param name="HideEditor">True to hide the editor</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.#ctor(System.String)">
            <summary>
            Creates a new assembly
            </summary>
            <param name="Name">Name of new assembly</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new assembly or accesses an already opened assembly
            </summary>
            <param name="Name">Name of assembly to create or access</param>
            <param name="CreateNew">True to create a new assembly, false to access an opened assembly</param>
        </member>
    <member name="M:AlibreScript.API.Assembly.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new assembly or accesses an already opened assembly, optionally hiding the editor
            </summary>
            <param name="Name">Name of assembly to create or access</param>
            <param name="CreateNew">True to create a new assembly, false to access an opened assembly</param>
            <param name="HideEditor">True to hide the editor (only valid if assembly is not already open)</param>
        </member>
    <member name="P:AlibreScript.API.Assembly.Name">
            <summary>
            Name of the assembly
            </summary>
        </member>
    <member name="P:AlibreScript.API.Assembly.Configurations">
            <summary>
            A list of configurations defined on the assembly
            </summary>
        </member>
    <member name="T:AlibreScript.API.Assembly.ConstraintBoundsType">
            <summary>
            Assembly constraint bounds types
            </summary>
        </member>
    <member name="M:AlibreScript.API.Edge.GetPart">
            <summary>
            Gets the part that the edge is defined on
            </summary>
            <returns>Part that contains edge</returns>
        </member>
    <member name="M:AlibreScript.API.Edge.GetVertices">
            <summary>
            Gets a python list of the current vertices in the edge
            </summary>
            <returns>Python list of vertices</returns>
        </member>
    <member name="M:AlibreScript.API.Edge.GetSelectionAssembly">
            <summary>
            The assembly that the edge was selected on
            Only valid when a selection has been made
            </summary>
            <returns>Assembly or null for no assembly</returns>
        </member>
    <member name="P:AlibreScript.API.Edge.Name">
            <summary>
            Name of the edge
            </summary>
        </member>
    <member name="P:AlibreScript.API.Edge.Diameter">
            <summary>
            The diameter of the edge, if it is a circle
            </summary>
        </member>
    <member name="P:AlibreScript.API.Edge.Length">
            <summary>
            The length of the edge
            </summary>
        </member>
    <member name="M:AlibreScript.API.Face.GetPart">
            <summary>
            Gets the part that the face is defined on
            </summary>
            <returns>Part that contains face</returns>
        </member>
    <member name="M:AlibreScript.API.Face.IsRectangle">
            <summary>
            Determines if the face is a rectangle
            </summary>
            <returns>true if face is a rectangle</returns>
        </member>
    <member name="M:AlibreScript.API.Face.GetEdges">
            <summary>
            Gets a list of the current edges in the face
            </summary>
            <returns>List of edges</returns>
        </member>
    <member name="M:AlibreScript.API.Face.GetAdjoiningFaces">
            <summary>
            Gets a list of the adjoining faces
            </summary>
            <returns>List of faces</returns>
        </member>
    <member name="M:AlibreScript.API.Face.GetVertices">
            <summary>
            Gets a list of the current vertices in the face
            </summary>
            <returns>List of vertices</returns>
        </member>
    <member name="M:AlibreScript.API.Face.GetSelectionAssembly">
            <summary>
            The assembly that the edge was selected on
            Only valid when a selection has been made
            </summary>
            <returns>Assembly or null for no assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Face.IsParallel(AlibreScript.API.Face)">
            <summary>
            Checks if another face is parallel to this one
            </summary>
            <param name="OtherFace">The other face to check</param>
            <returns>true if the faces are parallel</returns>
        </member>
    <member name="M:AlibreScript.API.Face.DistanceTo(AlibreScript.API.Face)">
            <summary>
            Gets the distance from this face to another face
            </summary>
            <param name="OtherFace">The other face to measure to</param>
            <returns>The distance between faces</returns>
        </member>
    <member name="M:AlibreScript.API.Face.GetArea">
            From: https://stackoverflow.com/questions/20672183/calculating-the-area-of-a-closed-polygon-on-a-plane
            <summary>
            Gets the area of the face
            </summary>
            <returns>Area of face</returns>
        </member>
    <member name="P:AlibreScript.API.Face.Name">
            <summary>
            The name of the face
            </summary>
        </member>
    <member name="M:AlibreScript.API.Feature.SetColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the part
            </summary>
            <param name="Red">Red component 0 - 255</param>
            <param name="Green">Green component 0 - 255</param>
            <param name="Blue">Blue component 0 - 255</param>
        </member>
    <member name="P:AlibreScript.API.Feature.Name">
            <summary>
            Name of the feature
            </summary>
        </member>
    <member name="M:AlibreScript.API.Sketch.GetPart">
            <summary>
            Part that the sketch is defined on
            </summary>
            <returns>Part that defines the sketch</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.GetSurface">
            <summary>
            Gets the surface that the sketch was created on, e.g.
            a design plane or a face
            </summary>
            <returns>Plane or Face object</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddConstraint(AlibreScript.API.ISketchFigure,AlibreScript.API.Sketch.Constraints)">
            <summary>
            Adds a constraint to the sketch
            </summary>
            <param name="Figure">Figure to constrain (e.g. Line)</param>
            <param name="Constraint">Constraint to apply</param>
            <returns>True if constraint was added</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddConstraint(IronPython.Runtime.List,AlibreScript.API.Sketch.Constraints)">
            <summary>
            Adds a constraint to the sketch
            </summary>
            <param name="Figures">List of Sketch figures to constrain [Figure1, Figure2, ...] (Circle, Line, CircularArc, etc.)</param>
            <param name="Constraint">Constraint to apply</param>
            <returns>Returns True if constraint was added</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddLine(IronPython.Runtime.List,IronPython.Runtime.List,System.Boolean)">
            <summary>
            Adds a line to the sketch
            </summary>
            <param name="StartPoint">Start of line [X, Y]</param>
            <param name="EndPoint">End of line [X, Y]</param>
            <param name="IsReference">true if line is a reference line</param>
            <returns>The added line</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddLine(AlibreScript.API.Line)">
            <summary>
            Adds a line to the sketch
            </summary>
            <param name="NewLine">2D line to add</param>
            <returns>The added line</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddLine(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a line to the sketch
            </summary>
            <param name="X1">Start point X</param>
            <param name="Y1">Start point Y</param>
            <param name="X2">End point X</param>
            <param name="Y2">End point Y</param>
            <param name="IsReference">true to create a reference line</param>
            <returns>The added line</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddPoint(System.Double,System.Double)">
            <summary>
            Adds a point to the sketch
            </summary>
            <param name="X">Point X coordinate</param>
            <param name="Y">Point Y coordinate</param>
            <returns>The created sketch point</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddPoint(System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a point to the sketch [DEPRECATED - DO NOT USE]
            </summary>
            <param name="X">Point X coordinate</param>
            <param name="Y">Point Y coordinate</param>
            <param name="IsReference">Set to false</param>
            <returns>The added point</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddPoint(AlibreScript.API.SketchPoint)">
            <summary>
            Adds a point to the sketch
            </summary>
            <param name="NewPoint">Point to add</param>
            <returns>The added point</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddLines(IronPython.Runtime.List,System.Boolean)">
            <summary>
            Adds a polyline to the sketch
            </summary>
            <param name="Points">Set of points [Point1X, Point1Y, Point2X, Point2Y, ...]</param>
            <param name="IsReference">true if line is a reference line</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddPolyline(AlibreScript.API.Polyline,System.Boolean)">
            <summary>
            Adds a polyline to the sketch
            </summary>
            <param name="Line">Polyine to add</param>
            <param name="IsReference">true if line is a reference line</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddArcCenterStartEnd(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a circular arc using three points - center, start and end
            Arc goes anti-clockwise from start to end
            </summary>
            <param name="CenterX">X coordinate for center</param>
            <param name="CenterY">Y coordinate for center</param>
            <param name="StartX">X coordinate for start</param>
            <param name="StartY">Y coordinate for start</param>
            <param name="EndX">X coordinate for end</param>
            <param name="EndY">Y cordinate for end</param>
            <param name="IsReference">True if arc is a reference figure</param>
            <returns>The added circular arc</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddArcCenterStartAngle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a circular arc using center, start and angle
            Arc goes anti-clockwise from start
            </summary>
            <param name="CenterX">X coordinate for center</param>
            <param name="CenterY">Y coordinate for center</param>
            <param name="StartX">X coordinate for start</param>
            <param name="StartY">Y coordinate for start</param>
            <param name="Angle">Arc angle in degrees</param>
            <param name="IsReference">True if arc is a reference figure</param>
            <returns>The added circular arc</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddEllipse(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds an ellipse to the sketch using three points
            </summary>
            <param name="CenterX">X coordinate of ellipse center</param>
            <param name="CenterY">Y coordinate of ellipse center</param>
            <param name="MajorX">X coordinate of ellipse on major axis</param>
            <param name="MajorY">Y coordinate of ellipse on major axis</param>
            <param name="MinorX">X coordinate of ellipse on minor axis</param>
            <param name="MinorY">Y coordinate of ellipse on minor axis</param>
            <param name="IsReference">True to create a reference ellipse</param>
            <returns>An ellipse object</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddEllipse(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds an ellipse to the sketch
            </summary>
            <param name="CenterX">X coordinate of ellipse center</param>
            <param name="CenterY">Y coordinate of ellipse center</param>
            <param name="MajorAxisDiameter">Diameter of ellipse on major axis</param>
            <param name="MinorMajorRatio">Ratio of minor diameter to major diameter</param>
            <param name="MajorAxisAngle">Angle of major axis</param>
            <param name="IsReference">True to create a reference ellipse</param>
            <returns>An ellipse object</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddEllipse(AlibreScript.API.Ellipse)">
            <summary>
            Adds an ellipse to the sketch
            </summary>
            <param name="NewEllipse">Ellipse to add</param>
            <returns>Added ellipse</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddEllipticalArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds an elliptical arc to the sketch
            </summary>
            <param name="CenterX">X coordinate of arc center</param>
            <param name="CenterY">Y coordinate of arc center</param>
            <param name="StartX">X coorindate of arc start</param>
            <param name="StartY">Y coordinate of arc start</param>
            <param name="EndX">X coordinate of arc end</param>
            <param name="EndY">Y coordinate of arc end</param>
            <param name="MajorAxisDiameter">Diameter of ellipse on major axis</param>
            <param name="MinorMajorRatio">Ratio of minor diameter to major diameter</param>
            <param name="MajorAxisAngle">Angle of major axis</param>
            <param name="IsReference">True to create a reference elliptical arc</param>
            <returns>An elliptical arc object</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddEllipticalArc(AlibreScript.API.EllipticalArc)">
            <summary>
            Adds an elliptical arc to the sketch
            </summary>
            <param name="NewEllipticalArc">Elliptical arc to add</param>
            <returns>Added elliptical arc</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddArc(AlibreScript.API.CircularArc)">
            <summary>
            Adds a circular arc to the sketch
            </summary>
            <param name="NewArc">Arc to add</param>
            <returns>The added circular arc</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddRectangle(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a rectangle to the sketch
            </summary>
            <param name="BottomLeftX">X coordinate of bottom left corner</param>
            <param name="BottomLeftY">Y coordinate of bottom left corner</param>
            <param name="TopRightX">X coordinate of top right</param>
            <param name="TopRightY">Y coordinate of top right</param>
            <param name="IsReference">True to create a reference rectangle</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddCircle(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a circle to the sketch
            </summary>
            <param name="CenterX">X coordinate of circle center</param>
            <param name="CenterY">Y coordinate of circle center</param>
            <param name="Diameter">Circle diameter</param>
            <param name="IsReference">True to create a reference circle</param>
            <returns>A circle object</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddCircle(AlibreScript.API.Circle)">
            <summary>
            Adds a circle to the sketch
            </summary>
            <param name="NewCircle">Circle to add to sketch</param>
            <returns>The added circle</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddBspline(System.Int32,IronPython.Runtime.List,IronPython.Runtime.List,IronPython.Runtime.List,System.Boolean)">
            <summary>
            Adds a Bspline to the sketch
            </summary>
            <param name="Order">Order of the Bspline (Degree - 1)</param>
            <param name="ControlPoints">List of control points</param>
            <param name="KnotVectors">List of knot vectors</param>
            <param name="Weights">List of control point weights</param>
            <param name="IsReference">True to create a reference bspline</param>
            <returns>The created Bspline</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddBspline(IronPython.Runtime.List,System.Boolean)">
            <summary>
            Adds a Bspline to the sketch through a set of points
            </summary>
            <param name="Points">List of points</param>
            <param name="IsReference">True to create a reference bspline</param>
            <returns>The created Bspline</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddFigure(AlibreScript.API.ISketchFigure)">
            <summary>
            Adds a figure to the sketch
            </summary>
            <param name="NewFigure">Figure to add</param>
            <returns>The added figure</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddBspline(AlibreScript.API.Bspline)">
            <summary>
            Adds a new bspline to the sketch
            </summary>
            <param name="NewBspline">Bspline to add to the sketch</param>
            <returns>The added Bspline</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddPolygon(System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Adds a regular polygon to the sketch
            </summary>
            <param name="CenterX">X coordinate for polygon center</param>
            <param name="CenterY">Y coordinate for polygon center</param>
            <param name="Diameter">Diameter of polygon</param>
            <param name="Sides">Number of sides</param>
            <param name="IsReference">True to create a reference polygon</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddPolyhole(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a polyhole to the sketch
            Create a "circle" whose size should be accurate regardless of the 3D printing method
            See: http://hydraraptor.blogspot.co.uk/2011/02/polyholes.html
            </summary>
            <param name="CenterX">X coordinate for hole center</param>
            <param name="CenterY">Y coordinate for hole center</param>
            <param name="Diameter">Diameter of hole</param>
            <param name="IsReference">true if line is a reference line</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.CopyFrom(AlibreScript.API.Sketch)">
            <summary>
            Copies a sketch into this sketch
            </summary>
            <param name="Source">Sketch to copy from</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.CopyFrom(AlibreScript.API.Sketch,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Copies a sketch into this sketch
            </summary>
            <param name="Source">Sketch to copy from</param>
            <param name="Angle">Rotation angle</param>
            <param name="RotationCenterX">X-coodinate for center of rotation</param>
            <param name="RotationCenterY">Y-coordinate for center of rotation</param>
            <param name="TranslateX">Amount to move sketch in X direction</param>
            <param name="TranslateY">Amount to move sketch in Y direction</param>
            <param name="ScaleOriginX">X-coordinate for scaling origin</param>
            <param name="ScaleOriginY">Y-coordinate for scaling origin</param>
            <param name="ScaleFactor">Factor for scaling as a percentage</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.PointtoGlobal(System.Double,System.Double)">
            <summary>
            Converts a point on the sketch into a 3D point in the part coordinate system
            </summary>
            <param name="x">X coordinate of point on sketch</param>
            <param name="y">Y coordinate of point on sketch</param>
            <returns>Python list [x, y, z]</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.GlobaltoPoint(System.Double,System.Double,System.Double)">
            <summary>
            Projects a 3D point in the part coordinate system into a point on the sketch
            </summary>
            <param name="x">X coordinate of 3D point</param>
            <param name="y">Y coordinate of 3D point</param>
            <param name="z">Z coordinate of 3D point</param>
            <returns>Python list [x, y]</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.GetSelectionAssembly">
            <summary>
            The assembly that the sketch was selected on
            Only valid when a selection has been made
            </summary>
            <returns>Assembly or null for no assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddDimension(AlibreScript.API.SketchPoint,AlibreScript.API.SketchPoint)">
            <summary>
            Adds a dimension to the sketch between two points
            </summary>
            <param name="P1">First point</param>
            <param name="P2">Second point</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddDimension(AlibreScript.API.Circle)">
            <summary>
            Adds a dimension to the radius of a circle
            </summary>
            <param name="Circle">Circle to dimension</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.AddDimension(AlibreScript.API.CircularArc)">
            <summary>
            Adds a dimension to the radius of an arc
            </summary>
            <param name="Arc">Arc to dimension</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.SavetoXml(System.String)">
            <summary>
            Saves the sketch to an XML file
            Does not support ellipses and elliptical arcs
            </summary>
            <param name="FileName">Path and name of file to save to</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.ToXml">
            <summary>
            Saves the sketch to an XML string
            Does not support ellipses and elliptical arcs
            </summary>
            <returns>XML string representing sketch</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch.LoadXml(System.String)">
            <summary>
            Loads the sketch from an XML file
            </summary>
            <param name="FileName">Path and name of file to load from</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.FromXml(System.String)">
            <summary>
            Adds elements to the sketch from XML
            </summary>
            <param name="Xml">XML to parse</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.StartFaceMapping(AlibreScript.API.Vertex,AlibreScript.API.Vertex)">
            <summary>
            Starts mapping the face so that the specified edge is at [0, 0]
            </summary>
            <param name="EdgeVertex1">Firrt vertex of edge</param>
            <param name="EdgeVertex2">Second vertex of edge</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.StartFaceMapping(IronPython.Runtime.List,IronPython.Runtime.List)">
            <summary>
            Starts mapping the face so that the specified edge is at [0, 0]
            Affects only the operation of the AddXXX functions and the
            GlobaltoPoint and PointtoGlobal functions, which will now use mapped X and Y values
            </summary>
            <param name="EdgeEndPoint1">First end point of edge [X, Y, Z]</param>
            <param name="EdgeEndPoint2">Second end point of edge [X, Y, Z]</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.StopFaceMapping">
            <summary>
            Stops mapping the face
            </summary>
        </member>
    <member name="M:AlibreScript.API.Sketch.StartMapping(IronPython.Runtime.List,IronPython.Runtime.List,IronPython.Runtime.List)">
            <summary>
            Starts mapping the sketch so that the specified line is at [0, 0]
            Affects only the operation of the AddXXX functions and the
            GlobaltoPoint and PointtoGlobal functions, which will now use mapped X and Y values
            </summary>
            <param name="Point1">First line end point [X, Y, Z]</param>
            <param name="Point2">Second line end point [X, Y, Z]</param>
            <param name="PointAboveAxis">Point to be located above the X-axis</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.StopMapping">
            <summary>
            Stops mapping the sketch
            </summary>
        </member>
    <member name="M:AlibreScript.API.Sketch.ImportSVG(System.String)">
            <summary>
            Imports an SVG into the sketch
            </summary>
            <param name="FileName">Path and name of SVG file</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.ImportSVG(System.String,System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Imports an SVG into the sketch
            </summary>
            <param name="FileName">Path and name of SVG file</param>
            <param name="TranslateX">Amount to translate in the X direction</param>
            <param name="TranslateY">Amount to translate in the Y direction</param>
            <param name="RotationAngle">Amount to rotate in degrees</param>
            <param name="TranslateThenRotate">true to perform translation passed to this function before rotation passed to this function, false to reverse order</param>
            <param name="NativeFigures">true to create native circles and arcs when possible, false to always use Bezier curves</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.ExportSVG(System.String)">
            <summary>
            Exports the sketch to an SVG
            </summary>
            <param name="FileName">Path and name of SVG file to export to</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.ExportSVG(System.String,System.Boolean)">
            <summary>
            Exports the sketch to an SVG
            </summary>
            <param name="FileName">Path and name of SVG file to export to</param>
            <param name="IncludeReferences">true to include reference figures in export</param>
        </member>
    <member name="M:AlibreScript.API.Sketch.ExportSVG(System.String,System.Boolean,System.Double,System.String,System.String,System.Boolean,System.Double,System.Double,System.String,System.String,System.Boolean,System.Double)">
            <summary>
            Exports the sketch to an SVG with specific styling
            </summary>
            <param name="FileName">Path and name of SVG file to export to</param>
            <param name="IncludeReferences">true to include reference figures in export</param>
            <param name="StrokeWidth">Stroke width</param>
            <param name="StrokeColor">String containing name of stroke color</param>
            <param name="StrokeLineCap">String containing name of stroke line cap type</param>
            <param name="StrokeDashed">true if stroke dashed, false if solid</param>
            <param name="StrokeDashLength">Length of stroke dashes if dashed</param>
            <param name="ReferenceStrokeWidth">Reference stroke width</param>
            <param name="ReferenceStrokeColor">String containing name of reference stroke color</param>
            <param name="ReferenceStrokeLineCap">String containing name of reference stroke line cap type, can be: butt, round, square</param>
            <param name="ReferenceStrokeDashed">true if reference stroke dashed, false if solid</param>
            <param name="ReferenceStrokeDashLength">Length of reference stroke dashes if dashed</param>
        </member>
    <member name="P:AlibreScript.API.Sketch.Name">
            <summary>
            Name of the sketch
            </summary>
        </member>
    <member name="P:AlibreScript.API.Sketch.Figures">
            <summary>
            A list of figures (line, circle, circulararc, bspline, ellipse, elliptical arc) defined on the sketch
            </summary>
        </member>
    <member name="P:AlibreScript.API.Sketch.Origin">
            <summary>
            The point that defines the origin
            </summary>
        </member>
    <member name="F:AlibreScript.API.GearSketch.NumberofTeeth">
            <summary>
            Number of teeth in gear
            </summary>
        </member>
    <member name="F:AlibreScript.API.GearSketch.PitchDiameter">
            <summary>
            Pitch diameter of gear in script units
            </summary>
        </member>
    <member name="F:AlibreScript.API.GearSketch.PressureAngle">
            <summary>
            Pressure angle of gear
            </summary>
        </member>
    <member name="F:AlibreScript.API.GearSketch.DiametralPitch">
            <summary>
            Diametral pitch of gear in teeth per inch
            </summary>
        </member>
    <member name="F:AlibreScript.API.GearSketch.CenterX">
            <summary>
            X coordinate of gear center
            </summary>
        </member>
    <member name="F:AlibreScript.API.GearSketch.CenterY">
            <summary>
            Y coordinate of gear center
            </summary>
        </member>
    <member name="M:AlibreScript.API.Line.#ctor(IronPython.Runtime.List,IronPython.Runtime.List,System.Boolean)">
            <summary>
            Creates a new 2D line
            </summary>
            <param name="StartPoint">Location of the start point [x, y]</param>
            <param name="EndPoint">Location of the end point [x, y]</param>
            <param name="IsReference">True if a reference line</param>
        </member>
    <member name="P:AlibreScript.API.Line.StartPoint">
            <summary>
            The start point of the line [x, y]
            </summary>
        </member>
    <member name="P:AlibreScript.API.Line.EndPoint">
            <summary>
            The end point of the line [x, y]
            </summary>
        </member>
    <member name="P:AlibreScript.API.Line.IsReference">
            <summary>
            True if the line is a reference line, false if it is a regular line
            </summary>
        </member>
    <member name="P:AlibreScript.API.Line.Length">
            <summary>
            The length of the line in script units
            </summary>
        </member>
    <member name="P:AlibreScript.API.Line.Start">
            <summary>
            The start point as a sketchpoint object
            </summary>
        </member>
    <member name="P:AlibreScript.API.Line.End">
            <summary>
            The end point as a sketchpoint object
            </summary>
        </member>
    <member name="F:AlibreScript.API.Material.ABS">
            <summary>
            Density for ABS plastic in kg/cm3
            </summary>
        </member>
    <member name="F:AlibreScript.API.Material.PLA">
            <summary>
            Density for PLA plastic in kg/cm3
            </summary>
        </member>
    <member name="T:AlibreScript.API.ParameterTypes">
            <summary>
            Type of parameter
            </summary>
        </member>
    <member name="T:AlibreScript.API.ParameterUnits">
            <summary>
            Units of parameters
            </summary>
        </member>
    <member name="M:AlibreScript.API.Parameter.AttachToExcel(System.String,System.String,System.String,AlibreScript.API.UnitTypes)">
            <summary>
            Attaches the parameter to a cell in an Ezcel spreadsheet
            </summary>
            <param name="Document">Path and name of Excel spreadsheet</param>
            <param name="Sheet">Name of sheet to use</param>
            <param name="Cell">Cell to use</param>
            <param name="Units">Units used in the cell</param>
        </member>
    <member name="P:AlibreScript.API.Parameter.Name">
            <summary>
            Name of the parameter
            </summary>
        </member>
    <member name="P:AlibreScript.API.Parameter.Comment">
            <summary>
            Comment for the parameter
            </summary>
        </member>
    <member name="P:AlibreScript.API.Parameter.Equation">
            <summary>
            Equation of the parameter
            </summary>
        </member>
    <member name="P:AlibreScript.API.Parameter.ExcelWorkbook">
            <summary>
            Excel workbook associated with the parameter e.g. 'Foo.xlsx'
            </summary>
        </member>
    <member name="P:AlibreScript.API.Parameter.ExcelSheet">
            <summary>
            Excel sheet associated with the parameter, e.g. 'Sheet1'
            </summary>
        </member>
    <member name="P:AlibreScript.API.Parameter.ExcelCell">
            <summary>
            Excel cell associated with the parameter, e.g. '$B$3'
            </summary>
        </member>
    <member name="P:AlibreScript.API.Parameter.Type">
            <summary>
            Type of the parameter
            </summary>
        </member>
    <member name="P:AlibreScript.API.Parameter.Units">
            <summary>
            Current units of the parameter
            </summary>
        </member>
    <member name="P:AlibreScript.API.Parameter.Value">
            <summary>
            Current value of the parameter in script units (for mm, cm, in), or degrees for angles, or raw value for other units
            </summary>
        </member>
    <member name="P:AlibreScript.API.Parameter.RawValue">
            <summary>
            Raw value of the parameter
            </summary>
        </member>
    <member name="M:AlibreScript.API.Part.#ctor(System.String,System.String)">
            <summary>
            Opens an existing part
            </summary>
            <param name="Folder">Folder containing part</param>
            <param name="Name">Name of part to open</param>
        </member>
    <member name="M:AlibreScript.API.Part.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Opens an existing part, optionally hiding the editor
            </summary>
            <param name="Folder">Folder containing part</param>
            <param name="Name">Name of part to open</param>
            <param name="HideEditor">True to hide the editor (only valid if part is not already open)</param>
        </member>
    <member name="M:AlibreScript.API.Part.#ctor(System.String)">
            <summary>
            Creates a new part
            </summary>
            <param name="Name">Name of new part</param>
        </member>
    <member name="M:AlibreScript.API.Part.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new part or accesses an already opened part
            </summary>
            <param name="Name">Name of part to create or access</param>
            <param name="CreateNew">True to create a new part, false to access an opened part</param>
        </member>
    <member name="M:AlibreScript.API.Part.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new part or accesses an already opened part, optionally hiding the editor
            </summary>
            <param name="Name">Name of part to create or access</param>
            <param name="CreateNew">True to create a new part, false to access an opened part</param>
            <param name="HideEditor">True to hide the editor (only valid if CreateNew is true)</param>
        </member>
    <member name="M:AlibreScript.API.Part.#ctor(System.String,AlibreScript.API.Part.FileTypes)">
            <summary>
            Opens or imports an existing file for editing
            </summary>
            <param name="FileName">Name of file to open</param>
            <param name="Type">Type of file (GeomagicDesignPart, STEP, IGES, ThreeDM, SAT, STL_in, STL_cm, STL_mm)</param>
        </member>
    <member name="M:AlibreScript.API.Part.#ctor(System.String,AlibreScript.API.Part.FileTypes,System.Boolean)">
            <summary>
            Opens or imports an existing file for editing, optionally hiding the editor
            </summary>
            <param name="FileName">Name of file to open</param>
            <param name="Type">Type of file (GeomagicDesignPart, STEP, IGES, ThreeDM, SAT, STL_in, STL_cm, STL_mm)</param>
            <param name="HideEditor">True to hide the editor</param>
        </member>
    <member name="P:AlibreScript.API.Part.Name">
            <summary>
            Name of the part
            </summary>
        </member>
    <member name="P:AlibreScript.API.Part.Configurations">
            <summary>
            List of configurations defined on the part
            </summary>
        </member>
    <member name="T:AlibreScript.API.Part.EndCondition">
            <summary>
            Extrusion end conditions - extrude until...
            </summary>
        </member>
    <member name="T:AlibreScript.API.Part.DirectionType">
            <summary>
            Extrusion directions - extrude along...
            </summary>
        </member>
    <member name="T:AlibreScript.API.Part.FileTypes">
            <summary>
            Supported file types
            </summary>
        </member>
    <member name="M:AlibreScript.API.Plane.GetPart">
            <summary>
            Gets the part that defined this plane
            </summary>
        </member>
    <member name="M:AlibreScript.API.Plane.GetSelectionAssembly">
            <summary>
            The assembly that the edge was selected on
            Only valid when a selection has been made
            </summary>
            <returns>Assembly or null for no assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Plane.IsParallel(AlibreScript.API.Plane)">
            <summary>
            Checks if another plane is parallel to this one
            </summary>
            <param name="OtherPlane">The other plane to check</param>
            <returns>true if the planes are parallel</returns>
        </member>
    <member name="M:AlibreScript.API.Plane.Hide">
            <summary>
            Hides the plane
            </summary>
        </member>
    <member name="M:AlibreScript.API.Plane.Show">
            <summary>
            Shows the plane
            </summary>
        </member>
    <member name="P:AlibreScript.API.Plane.Name">
            <summary>
            The name of the plane
            </summary>
        </member>
    <member name="M:AlibreScript.API.Point.GetPart">
            <summary>
            Gets the part that the point is defined in
            </summary>
            <returns></returns>
        </member>
    <member name="M:AlibreScript.API.Point.GetCoordinates">
            <summary>
            Gets the coordiates of the point as a list [X, Y, Z]
            </summary>
            <returns>List of coordinates [X, Y, Z]</returns>
        </member>
    <member name="M:AlibreScript.API.Point.GetSelectionAssembly">
            <summary>
            The assembly that the edge was selected on
            Only valid when a selection has been made
            </summary>
            <returns>Assembly or null for no assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Point.Hide">
            <summary>
            Hides the point
            </summary>
        </member>
    <member name="M:AlibreScript.API.Point.Show">
            <summary>
            Shows the point
            </summary>
        </member>
    <member name="P:AlibreScript.API.Point.Name">
            <summary>
            Name of the point
            </summary>
        </member>
    <member name="P:AlibreScript.API.Point.X">
            <summary>
            Point X coordinate
            </summary>
        </member>
    <member name="P:AlibreScript.API.Point.Y">
            <summary>
            Point Y coordinate
            </summary>
        </member>
    <member name="P:AlibreScript.API.Point.Z">
            <summary>
            Point Z coordinate
            </summary>
        </member>
    <member name="M:AlibreScript.API.Polyline.AddPoint(AlibreScript.API.PolylinePoint)">
            <summary>
            Adds a new point to the polyline
            </summary>
            <param name="Point">Point to add</param>
        </member>
    <member name="M:AlibreScript.API.Polyline.InsertPoint(System.Int32,AlibreScript.API.PolylinePoint)">
            <summary>
            Inserts a point at a specific location
            </summary>
            <param name="Index">0-based index of location to insert</param>
            <param name="Point">Point to insert</param>
        </member>
    <member name="M:AlibreScript.API.Polyline.AddCircle(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Adds a circle to the line
            </summary>
            <param name="CenterX">X coordinate of circle center</param>
            <param name="CenterY">Y coordinate of circle center</param>
            <param name="Diameter">Diameter of circle</param>
            <param name="sides">Number of sides to use to approximate circle</param>
        </member>
    <member name="M:AlibreScript.API.Polyline.AddArc(AlibreScript.API.PolylinePoint,AlibreScript.API.PolylinePoint,AlibreScript.API.PolylinePoint,System.Int32)">
            <summary>
            Adds an arc to the polyline. The arc is approcimated with straight line segments
            </summary>
            <param name="Center">Point defining center of arc</param>
            <param name="Start">Point defining start of arc</param>
            <param name="End">Point defining end of arc</param>
            <param name="MinimumSegments">Minimum number of line segments to use to form arc</param>
        </member>
    <member name="M:AlibreScript.API.Polyline.AddPolyline(AlibreScript.API.Polyline)">
            <summary>
            Appends a line to the current line
            </summary>
            <param name="AppendLine">Line to append</param>
        </member>
    <member name="M:AlibreScript.API.Polyline.FindIntersection(AlibreScript.API.Polyline,AlibreScript.API.Polyline)">
            <summary>
            Finds the first intersection point between two lines
            </summary>
            <param name="L1">First line</param>
            <param name="L2">Second line</param>
            <returns>First intersection point or null if none found</returns>
        </member>
    <member name="M:AlibreScript.API.Polyline.FindIntersectionWithCircle(AlibreScript.API.Polyline,System.Double,System.Double,System.Double)">
            Adapted from: http://stackoverflow.com/questions/1073336/circle-line-collision-detection
            <summary>
            Finds first intersection of line with a circle
            </summary>
            <param name="L1">Line to check</param>
            <param name="CircleX">X-coordinate of circle center</param>
            <param name="CircleY">Y-coordinate of circle center</param>
            <param name="Radius">Radius of circle</param>
            <returns>Intersection point or null if not found</returns>
        </member>
    <member name="M:AlibreScript.API.Polyline.FindIntersection(AlibreScript.API.PolylinePoint,AlibreScript.API.PolylinePoint,AlibreScript.API.PolylinePoint,AlibreScript.API.PolylinePoint)">
            Uses the method at: http://stackoverflow.com/a/565282/444611
            <summary>
            Gets the intersection between the line segments A1A2 and B1B2
            </summary>
            <param name="A1">First segment start point</param>
            <param name="A2">First segment end point</param>
            <param name="B1">Second segment start point</param>
            <param name="B2">Second segment end point</param>
            <returns>Intersection point or null if not found</returns>
        </member>
    <member name="M:AlibreScript.API.Polyline.IsPointOnLine(AlibreScript.API.PolylinePoint,AlibreScript.API.PolylinePoint,AlibreScript.API.PolylinePoint,System.Double)">
            <summary>
            Determines if a point is on a line segment
            </summary>
            <param name="A1">First point of line segment</param>
            <param name="A2">Last point of line segment</param>
            <param name="Point">Point to check</param>
            <param name="Tolerance">Fudge factor</param>
            <returns>True if point is on line</returns>
        </member>
    <member name="M:AlibreScript.API.Polyline.SplitAtPoint(AlibreScript.API.PolylinePoint,System.Double)">
            <summary>
            Splits a polyline at a point, creating two polylines
            </summary>
            <param name="SplitPoint">Point to split at</param>
            <param name="Tolerence">Tolerance to determine if point is on/near line</param>
            <returns>List of polylines [A, B]</returns>
        </member>
    <member name="M:AlibreScript.API.Polyline.Clone">
            <summary>
            Creates an exact copy of the line
            </summary>
            <returns>Copy of line</returns>
        </member>
    <member name="M:AlibreScript.API.Polyline.Clone(System.Int32,System.Int32)">
            <summary>
            Creates an exact copy of a section of the line
            </summary>
            <param name="StartIndex">0-based index of first point to include in copy</param>
            <param name="EndIndex">0-based index of last point to include in copy</param>
            <returns>Copied line</returns>
        </member>
    <member name="M:AlibreScript.API.Polyline.Join(AlibreScript.API.Polyline)">
            <summary>
            Joins a line onto the end of the current line and returns the new line
            </summary>
            <param name="AppendLine">The line to join to the current line</param>
            <returns>The new line created from this line plus the appended line</returns>
        </member>
    <member name="M:AlibreScript.API.Polyline.RotateZ(System.Double,System.Double,System.Double)">
            <summary>
            Rotates the polyline around the Z axis
            </summary>
            <param name="CenterX">X coordinate of center of rotation</param>
            <param name="CenterY">Y coordinate of center of rotation</param>
            <param name="Angle">Number of degrees to rotate</param>
        </member>
    <member name="M:AlibreScript.API.Polyline.Offset(System.Double,System.Double)">
            <summary>
            Applies an offset to all points on the line
            </summary>
            <param name="OffsetX">X offset to apply</param>
            <param name="OffsetY">Y offset to apply</param>
        </member>
    <member name="M:AlibreScript.API.Polyline.RemoveDuplicates">
            <summary>
            Removes duplicate points that are next to each other
            </summary>
        </member>
    <member name="M:AlibreScript.API.Polyline.#ctor">
            <summary>
            Creates a new 2D polyline that can be later added to a 2D sketch
            </summary>
        </member>
    <member name="M:AlibreScript.API.Polyline.#ctor(IronPython.Runtime.List)">
            <summary>
            Creates a new 2D polyline that can be later added to a 2D sketch
            </summary>
            <param name="Points">List of points in the polyline [X1, Y1, X2, Y2, ...]</param>
        </member>
    <member name="M:AlibreScript.API.PolylinePoint.Offset(System.Double,System.Double)">
            <summary>
            Applies an offset to the point and creates a new point
            </summary>
            <param name="X">X offset to apply</param>
            <param name="Y">Y offset to apply</param>
            <returns>New point with offset applied</returns>
        </member>
    <member name="M:AlibreScript.API.PolylinePoint.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Scales the point location based on an origin for the scaling
            </summary>
            <param name="ScaleOriginX">X-coordinate for scaling origin</param>
            <param name="ScaleOriginY">Y-coordinate for scaling origin</param>
            <param name="ScaleFactor">Factor for scaling as a percentage</param>
            <returns>New point with scaling applied</returns>
        </member>
    <member name="M:AlibreScript.API.PolylinePoint.RotateZ(System.Double,System.Double,System.Double)">
            <summary>
            Rotates the point around the Z axis
            </summary>
            <param name="CenterX">X coordinate of center of rotation</param>
            <param name="CenterY">Y coordinate of center of rotation</param>
            <param name="Angle">Number of degrees to rotate</param>
        </member>
    <member name="M:AlibreScript.API.PolylinePoint.#ctor">
            <summary>
            Creates a new polyline point
            </summary>
        </member>
    <member name="M:AlibreScript.API.PolylinePoint.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new polyline point
            </summary>
            <param name="X">X coordinate</param>
            <param name="Y">Y coordinate</param>
        </member>
    <member name="F:AlibreScript.API.PolylinePoint.X">
            <summary>
            X coordinate
            </summary>
        </member>
    <member name="F:AlibreScript.API.PolylinePoint.Y">
            <summary>
            Y coordinate
            </summary>
        </member>
    <member name="T:AlibreScript.API.Sketch.Constraints">
            <summary>
            Supported sketch constraints
            </summary>
        </member>
    <member name="T:AlibreScript.API.GuideCurveTypes">
            <summary>
            Type of guide curve
            </summary>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.GetPart">
            <summary>
            Part that the sketch is defined on
            </summary>
            <returns>Part</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.AddLine(IronPython.Runtime.List,IronPython.Runtime.List)">
            <summary>
            Adds a line to the sketch
            </summary>
            <param name="StartPoint">Start of line [X, Y, Z]</param>
            <param name="EndPoint">End of line [X, Y, Z]</param>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.AddLine(AlibreScript.API.Line3D)">
            <summary>
            Adds a line to the sketch
            </summary>
            <param name="NewLine">3D line to add</param>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
            Adds a point to the sketch
            </summary>
            <param name="X">Point X coordinate</param>
            <param name="Y">Point Y coordinate</param>
            <param name="Z">Point Z coordinate</param>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.AddPoint(AlibreScript.API.SketchPoint3D)">
            <summary>
            Adds a point to the sketch
            </summary>
            <param name="NewPoint">Point to add</param>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.AddLine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a line to the sketch
            </summary>
            <param name="X1">Start point X</param>
            <param name="Y1">Start point Y</param>
            <param name="Z1">Start point Z</param>
            <param name="X2">End point X</param>
            <param name="Y2">End point Y</param>
            <param name="Z2">End point Z</param>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.AddLines(IronPython.Runtime.List)">
            <summary>
            Adds a polyline to the sketch
            </summary>
            <param name="Points">Set of points [Point1X, Point1Y, Point1Z, Point2X, Point2Y, Point2Z, ...]</param>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.AddPolyline(AlibreScript.API.Polyline3D)">
            <summary>
            Adds a polyline to the sketch
            </summary>
            <param name="Line">Polyine to add</param>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.AddArcCenterStartEnd(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a circular arc using three points - center, start and end
            Arc goes anti-clockwise from start to end
            </summary>
            <param name="CenterX">X coordinate for center</param>
            <param name="CenterY">Y coordinate for center</param>
            <param name="CenterZ">Z coordinate for center</param>
            <param name="StartX">X coordinate for start</param>
            <param name="StartY">Y coordinate for start</param>
            <param name="StartZ">Z coordinate for start</param>
            <param name="EndX">X coordinate for end</param>
            <param name="EndY">Y cordinate for end</param>
            <param name="EndZ">Z coordnate for end</param>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.AddArc(AlibreScript.API.CircularArc3D)">
            <summary>
            Adds a circular arc to the sketch
            </summary>
            <param name="NewArc">Arc to add</param>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.AddBspline(IronPython.Runtime.List)">
            <summary>
            Adds a Bspline to the sketch
            </summary>
            <param name="Points">List of control points [X1, Y1, Z1, X2, Y2, Z2, ...]</param>
            <returns>The Bspline object that was created</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.AddBspline(AlibreScript.API.Bspline3D)">
            <summary>
            Adds a Bspline to the sketch
            </summary>
            <param name="Bspline">Bspline to add</param>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.GetSelectionAssembly">
            <summary>
            The assembly that the edge was selected on
            Only valid when a selection has been made
            </summary>
            <returns>Assembly or null for no assembly</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.SavetoXml(System.String)">
            <summary>
            Saves the sketch to an XML file
            </summary>
            <param name="FileName">Path and name of file to save to</param>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.ToXml">
            <summary>
            Saves the sketch to an XML string
            </summary>
            <returns>XML string representing sketch</returns>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.LoadXml(System.String)">
            <summary>
            Loads the sketch from an XML file
            </summary>
            <param name="FileName">Path and name of file to load from</param>
        </member>
    <member name="M:AlibreScript.API.Sketch3D.FromXml(System.String)">
            <summary>
            Adds elements to the sketch from XML
            </summary>
            <param name="Xml">XML to parse</param>
        </member>
    <member name="P:AlibreScript.API.Sketch3D.Name">
            <summary>
            Name of the sketch
            </summary>
        </member>
    <member name="P:AlibreScript.API.Sketch3D.Figures">
            <summary>
            A list of figures defines on the sketch, e.g. bspline
            </summary>
        </member>
    <member name="M:AlibreScript.API.SketchPoint.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Creates a new sketch point which can be added to sketches
            </summary>
            <param name="X">X coordinate of sketch point</param>
            <param name="Y">Y coordinate of sketch point</param>
            <param name="IsReference">true to create a reference point, false to create a regular point</param>
        </member>
    <member name="P:AlibreScript.API.SketchPoint.X">
            <summary>
            X-coordinate of point
            </summary>
        </member>
    <member name="P:AlibreScript.API.SketchPoint.Y">
            <summary>
            Y-coordinate of point
            </summary>
        </member>
    <member name="P:AlibreScript.API.SketchPoint.IsReference">
            <summary>
            True if the point is a reference point, false if it is a regular point
            </summary>
        </member>
    <member name="M:AlibreScript.API.SketchPoint3D.#ctor(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Creates a new 3D sketch point which can be added to sketches
            </summary>
            <param name="X">X coordinate of point</param>
            <param name="Y">Y coordinate of point</param>
            <param name="Z">Z coordinate of point</param>
            <param name="IsReference">true to create a reference point, false to create a regular point</param>
        </member>
    <member name="P:AlibreScript.API.SketchPoint3D.X">
            <summary>
            X-coordinate of point
            </summary>
        </member>
    <member name="P:AlibreScript.API.SketchPoint3D.Y">
            <summary>
            Y-coordinate of point
            </summary>
        </member>
    <member name="P:AlibreScript.API.SketchPoint3D.Z">
            <summary>
            Z-coordinate of point
            </summary>
        </member>
    <member name="P:AlibreScript.API.SketchPoint3D.IsReference">
            <summary>
            True if the point is a reference point, false if it is a regular point
            </summary>
        </member>
    <member name="M:AlibreScript.API.ThreeD.GetPerpendicularVector(IronPython.Runtime.List)">
            <summary>
            Gets a vector that is perpendicular to a vector
            </summary>
            <param name="Vector">Vector [X, Y, Z]</param>
            <returns>Vector that is perpendicular [X, Y, Z]</returns>
        </member>
    <member name="M:AlibreScript.API.ThreeD.TransformPointUsingVectors(IronPython.Runtime.List,IronPython.Runtime.List,IronPython.Runtime.List)">
            <summary>
            Transforms a point based on two vectors
            </summary>
            <param name="SourceVector">Source vector [X, Y, Z]</param>
            <param name="DestinationVector">Destination vector [X, Y, Z]</param>
            <param name="Point">Point to transform [X, Y, Z]</param>
            <returns>Transformed point [X, Y, Z]</returns>
        </member>
    <member name="T:AlibreScript.API.UnitTypes">
            <summary>
            Supported units
            </summary>
        </member>
    <member name="F:AlibreScript.API.Units.Current">
            <summary>
            The current units
            </summary>
        </member>
    <member name="M:AlibreScript.API.Vertex.GetPart">
            <summary>
            Part that the vertex is defined on
            </summary>
            <returns>Part</returns>
        </member>
    <member name="M:AlibreScript.API.Vertex.GetSelectionAssembly">
            <summary>
            The assembly that the edge was selected on
            Only valid when a selection has been made
            </summary>
            <returns>Assembly or null for no assembly</returns>
        </member>
    <member name="P:AlibreScript.API.Vertex.Name">
            <summary>
            Name of the vertex
            </summary>
        </member>
    <member name="P:AlibreScript.API.Vertex.X">
            <summary>
            X-coordinate of vertex
            </summary>
        </member>
    <member name="P:AlibreScript.API.Vertex.Y">
            <summary>
            Y-coordinate of vertex
            </summary>
        </member>
    <member name="P:AlibreScript.API.Vertex.Z">
            <summary>
            Z-coordinate of vertex
            </summary>
        </member>
  </members>
</doc>